ARM GAS  /tmp/cc2z0qN7.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_can.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_CAN_MspInit
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_CAN_MspInit:
  25              	.LVL0:
  26              	.LFB67:
  27              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @file    stm32f1xx_hal_can.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @attention
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * Copyright (c) 2016 STMicroelectronics.
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * All rights reserved.
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * This software is licensed under terms that can be found in the LICENSE file
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * in the root directory of this software component.
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @verbatim
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                         ##### How to use this driver #####
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
ARM GAS  /tmp/cc2z0qN7.s 			page 2


  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_MspInit():
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Configure CAN pins
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure CAN pins as alternate function
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           functions:
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           messages.
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           can be used:
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailboxes.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  in a Tx mailbox.
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           stored in the Rx Fifo.
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Polling mode operation ***
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==============================
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Reception:
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  until at least one message is received.
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Transmission:
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then request transmission of a message using
ARM GAS  /tmp/cc2z0qN7.s 			page 3


  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Interrupt mode operation ***
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ================================
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function. Then, the process can be controlled through the
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications can be deactivated using
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           here.
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  read, the notification can be activated again.
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Sleep mode ***
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==================
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           be completed.
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           will be entered.
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The wake-up from sleep mode can be triggered by two ways:
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  if automatic wake up mode is enabled.
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *** Callback registration ***
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   =============================================
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   allows the user to configure dynamically the driver callbacks.
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Use Function HAL_CAN_RegisterCallback() to register an interrupt callback.
ARM GAS  /tmp/cc2z0qN7.s 			page 4


 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Function HAL_CAN_RegisterCallback() allows to register following callbacks:
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   and a pointer to the user callback function.
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Use function HAL_CAN_UnRegisterCallback() to reset a callback to the default
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   weak function.
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_UnRegisterCallback takes as parameters the HAL peripheral handle,
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   and the Callback ID.
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   This function allows to reset following callbacks:
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   By default, after the HAL_CAN_Init() and when the state is HAL_CAN_STATE_RESET,
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   all callbacks are set to the corresponding weak functions:
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   example HAL_CAN_ErrorCallback().
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Exception done for MspInit and MspDeInit functions that are
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   reset to the legacy weak function in the HAL_CAN_Init()/ HAL_CAN_DeInit() only when
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   these callbacks are null (not registered beforehand).
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if not, MspInit or MspDeInit are not null, the HAL_CAN_Init()/ HAL_CAN_DeInit()
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Callbacks can be registered/unregistered in HAL_CAN_STATE_READY state only.
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   in HAL_CAN_STATE_READY or HAL_CAN_STATE_RESET state,
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   In that case first register the MspInit/MspDeInit user callbacks
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   using HAL_CAN_RegisterCallback() before calling HAL_CAN_DeInit()
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   or HAL_CAN_Init() function.
ARM GAS  /tmp/cc2z0qN7.s 			page 5


 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   When The compilation define USE_HAL_CAN_REGISTER_CALLBACKS is set to 0 or
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   not defined, the callback registration feature is not available and all callbacks
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   are set to the corresponding weak functions.
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @endverbatim
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #include "stm32f1xx_hal.h"
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @addtogroup STM32F1xx_HAL_Driver
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if defined(CAN1)
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN CAN
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief CAN driver modules
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* HAL_CAN_LEGACY_MODULE_ENABLED */
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #define CAN_WAKEUP_TIMEOUT_COUNTER 1000000U
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief    Initialization and Configuration functions
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
ARM GAS  /tmp/cc2z0qN7.s 			page 6


 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset callbacks to legacy functions */
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0M
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0F
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1M
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1F
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbo
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbo
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbo
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbo
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbo
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbo
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCal
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFr
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCal
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc2z0qN7.s 			page 7


 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (hcan->MspInitCallback == NULL)
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->MspInitCallback(hcan);
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Request initialisation */
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Wait initialisation acknowledge */
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Exit from sleep mode */
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
ARM GAS  /tmp/cc2z0qN7.s 			page 8


 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the time triggered communication mode */
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic bus-off management */
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic wake-up mode */
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic retransmission */
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the transmit FIFO priority */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
ARM GAS  /tmp/cc2z0qN7.s 			page 9


 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the bit timing register */
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the error code */
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the CAN state */
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         reset values.
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Stop the CAN module */
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->MspDeInitCallback == NULL)
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->MspDeInitCallback(hcan);
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc2z0qN7.s 			page 10


 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN peripheral */
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Change CAN state */
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
  28              		.loc 1 508 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
  33              		.loc 1 510 3 view .LVU1
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
  34              		.loc 1 515 1 is_stmt 0 view .LVU2
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE67:
  39              		.section	.text.HAL_CAN_Init,"ax",%progbits
  40              		.align	1
  41              		.global	HAL_CAN_Init
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu softvfp
  47              	HAL_CAN_Init:
  48              	.LVL1:
  49              	.LFB65:
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  50              		.loc 1 276 1 is_stmt 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  54              		.loc 1 277 3 view .LVU4
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  55              		.loc 1 280 3 view .LVU5
ARM GAS  /tmp/cc2z0qN7.s 			page 11


 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  56              		.loc 1 280 6 is_stmt 0 view .LVU6
  57 0000 0028     		cmp	r0, #0
  58 0002 00F0A180 		beq	.L21
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  59              		.loc 1 276 1 view .LVU7
  60 0006 38B5     		push	{r3, r4, r5, lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 16
  63              		.cfi_offset 3, -16
  64              		.cfi_offset 4, -12
  65              		.cfi_offset 5, -8
  66              		.cfi_offset 14, -4
  67 0008 0446     		mov	r4, r0
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
  68              		.loc 1 286 3 is_stmt 1 view .LVU8
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
  69              		.loc 1 287 3 view .LVU9
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
  70              		.loc 1 288 3 view .LVU10
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
  71              		.loc 1 289 3 view .LVU11
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
  72              		.loc 1 290 3 view .LVU12
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
  73              		.loc 1 291 3 view .LVU13
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
  74              		.loc 1 292 3 view .LVU14
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  75              		.loc 1 293 3 view .LVU15
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  76              		.loc 1 294 3 view .LVU16
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  77              		.loc 1 295 3 view .LVU17
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  78              		.loc 1 296 3 view .LVU18
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  79              		.loc 1 297 3 view .LVU19
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  80              		.loc 1 327 3 view .LVU20
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  81              		.loc 1 327 11 is_stmt 0 view .LVU21
  82 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  83              		.loc 1 327 6 view .LVU22
  84 000e D3B1     		cbz	r3, .L26
  85              	.LVL2:
  86              	.L4:
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  87              		.loc 1 335 3 is_stmt 1 view .LVU23
  88 0010 2268     		ldr	r2, [r4]
  89 0012 1368     		ldr	r3, [r2]
  90 0014 43F00103 		orr	r3, r3, #1
  91 0018 1360     		str	r3, [r2]
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  92              		.loc 1 338 3 view .LVU24
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc2z0qN7.s 			page 12


  93              		.loc 1 338 15 is_stmt 0 view .LVU25
  94 001a FFF7FEFF 		bl	HAL_GetTick
  95              	.LVL3:
  96 001e 0546     		mov	r5, r0
  97              	.LVL4:
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  98              		.loc 1 341 3 is_stmt 1 view .LVU26
  99              	.L5:
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 100              		.loc 1 341 9 view .LVU27
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 101              		.loc 1 341 15 is_stmt 0 view .LVU28
 102 0020 2368     		ldr	r3, [r4]
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 103              		.loc 1 341 25 view .LVU29
 104 0022 5A68     		ldr	r2, [r3, #4]
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 105              		.loc 1 341 9 view .LVU30
 106 0024 12F0010F 		tst	r2, #1
 107 0028 10D1     		bne	.L27
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 108              		.loc 1 343 5 is_stmt 1 view .LVU31
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 109              		.loc 1 343 10 is_stmt 0 view .LVU32
 110 002a FFF7FEFF 		bl	HAL_GetTick
 111              	.LVL5:
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 112              		.loc 1 343 24 view .LVU33
 113 002e 401B     		subs	r0, r0, r5
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 114              		.loc 1 343 8 view .LVU34
 115 0030 0A28     		cmp	r0, #10
 116 0032 F5D9     		bls	.L5
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 117              		.loc 1 346 7 is_stmt 1 view .LVU35
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 118              		.loc 1 346 23 is_stmt 0 view .LVU36
 119 0034 636A     		ldr	r3, [r4, #36]
 120 0036 43F40033 		orr	r3, r3, #131072
 121 003a 6362     		str	r3, [r4, #36]
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 122              		.loc 1 349 7 is_stmt 1 view .LVU37
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 123              		.loc 1 349 19 is_stmt 0 view .LVU38
 124 003c 0523     		movs	r3, #5
 125 003e 84F82030 		strb	r3, [r4, #32]
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 126              		.loc 1 351 7 is_stmt 1 view .LVU39
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 127              		.loc 1 351 14 is_stmt 0 view .LVU40
 128 0042 0120     		movs	r0, #1
 129              	.L3:
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 130              		.loc 1 451 1 view .LVU41
 131 0044 38BD     		pop	{r3, r4, r5, pc}
 132              	.LVL6:
 133              	.L26:
ARM GAS  /tmp/cc2z0qN7.s 			page 13


 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 134              		.loc 1 330 5 is_stmt 1 view .LVU42
 135 0046 FFF7FEFF 		bl	HAL_CAN_MspInit
 136              	.LVL7:
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 137              		.loc 1 330 5 is_stmt 0 view .LVU43
 138 004a E1E7     		b	.L4
 139              	.LVL8:
 140              	.L27:
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 141              		.loc 1 356 3 is_stmt 1 view .LVU44
 142 004c 1A68     		ldr	r2, [r3]
 143 004e 22F00202 		bic	r2, r2, #2
 144 0052 1A60     		str	r2, [r3]
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 145              		.loc 1 359 3 view .LVU45
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 146              		.loc 1 359 15 is_stmt 0 view .LVU46
 147 0054 FFF7FEFF 		bl	HAL_GetTick
 148              	.LVL9:
 149 0058 0546     		mov	r5, r0
 150              	.LVL10:
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 151              		.loc 1 362 3 is_stmt 1 view .LVU47
 152              	.L7:
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 153              		.loc 1 362 9 view .LVU48
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 154              		.loc 1 362 15 is_stmt 0 view .LVU49
 155 005a 2368     		ldr	r3, [r4]
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 156              		.loc 1 362 25 view .LVU50
 157 005c 5A68     		ldr	r2, [r3, #4]
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 158              		.loc 1 362 9 view .LVU51
 159 005e 12F0020F 		tst	r2, #2
 160 0062 0DD0     		beq	.L28
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 161              		.loc 1 364 5 is_stmt 1 view .LVU52
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 162              		.loc 1 364 10 is_stmt 0 view .LVU53
 163 0064 FFF7FEFF 		bl	HAL_GetTick
 164              	.LVL11:
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 165              		.loc 1 364 24 view .LVU54
 166 0068 401B     		subs	r0, r0, r5
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 167              		.loc 1 364 8 view .LVU55
 168 006a 0A28     		cmp	r0, #10
 169 006c F5D9     		bls	.L7
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 170              		.loc 1 367 7 is_stmt 1 view .LVU56
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 171              		.loc 1 367 23 is_stmt 0 view .LVU57
 172 006e 636A     		ldr	r3, [r4, #36]
 173 0070 43F40033 		orr	r3, r3, #131072
 174 0074 6362     		str	r3, [r4, #36]
ARM GAS  /tmp/cc2z0qN7.s 			page 14


 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 175              		.loc 1 370 7 is_stmt 1 view .LVU58
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 176              		.loc 1 370 19 is_stmt 0 view .LVU59
 177 0076 0523     		movs	r3, #5
 178 0078 84F82030 		strb	r3, [r4, #32]
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 179              		.loc 1 372 7 is_stmt 1 view .LVU60
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 180              		.loc 1 372 14 is_stmt 0 view .LVU61
 181 007c 0120     		movs	r0, #1
 182 007e E1E7     		b	.L3
 183              	.L28:
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 184              		.loc 1 377 3 is_stmt 1 view .LVU62
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 185              		.loc 1 377 17 is_stmt 0 view .LVU63
 186 0080 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 187              		.loc 1 377 6 view .LVU64
 188 0082 012A     		cmp	r2, #1
 189 0084 3DD0     		beq	.L29
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 190              		.loc 1 383 5 is_stmt 1 view .LVU65
 191 0086 1A68     		ldr	r2, [r3]
 192 0088 22F08002 		bic	r2, r2, #128
 193 008c 1A60     		str	r2, [r3]
 194              	.L10:
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 195              		.loc 1 387 3 view .LVU66
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 196              		.loc 1 387 17 is_stmt 0 view .LVU67
 197 008e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 198              		.loc 1 387 6 view .LVU68
 199 0090 012B     		cmp	r3, #1
 200 0092 3BD0     		beq	.L30
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 201              		.loc 1 393 5 is_stmt 1 view .LVU69
 202 0094 2268     		ldr	r2, [r4]
 203 0096 1368     		ldr	r3, [r2]
 204 0098 23F04003 		bic	r3, r3, #64
 205 009c 1360     		str	r3, [r2]
 206              	.L12:
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 207              		.loc 1 397 3 view .LVU70
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 208              		.loc 1 397 17 is_stmt 0 view .LVU71
 209 009e A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 210              		.loc 1 397 6 view .LVU72
 211 00a0 012B     		cmp	r3, #1
 212 00a2 39D0     		beq	.L31
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 213              		.loc 1 403 5 is_stmt 1 view .LVU73
 214 00a4 2268     		ldr	r2, [r4]
 215 00a6 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cc2z0qN7.s 			page 15


 216 00a8 23F02003 		bic	r3, r3, #32
 217 00ac 1360     		str	r3, [r2]
 218              	.L14:
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 219              		.loc 1 407 3 view .LVU74
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 220              		.loc 1 407 17 is_stmt 0 view .LVU75
 221 00ae E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 222              		.loc 1 407 6 view .LVU76
 223 00b0 012B     		cmp	r3, #1
 224 00b2 37D0     		beq	.L32
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 225              		.loc 1 413 5 is_stmt 1 view .LVU77
 226 00b4 2268     		ldr	r2, [r4]
 227 00b6 1368     		ldr	r3, [r2]
 228 00b8 43F01003 		orr	r3, r3, #16
 229 00bc 1360     		str	r3, [r2]
 230              	.L16:
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 231              		.loc 1 417 3 view .LVU78
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 232              		.loc 1 417 17 is_stmt 0 view .LVU79
 233 00be 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 234              		.loc 1 417 6 view .LVU80
 235 00c0 012B     		cmp	r3, #1
 236 00c2 35D0     		beq	.L33
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 237              		.loc 1 423 5 is_stmt 1 view .LVU81
 238 00c4 2268     		ldr	r2, [r4]
 239 00c6 1368     		ldr	r3, [r2]
 240 00c8 23F00803 		bic	r3, r3, #8
 241 00cc 1360     		str	r3, [r2]
 242              	.L18:
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 243              		.loc 1 427 3 view .LVU82
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 244              		.loc 1 427 17 is_stmt 0 view .LVU83
 245 00ce 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 246              		.loc 1 427 6 view .LVU84
 247 00d0 012B     		cmp	r3, #1
 248 00d2 33D0     		beq	.L34
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 249              		.loc 1 433 5 is_stmt 1 view .LVU85
 250 00d4 2268     		ldr	r2, [r4]
 251 00d6 1368     		ldr	r3, [r2]
 252 00d8 23F00403 		bic	r3, r3, #4
 253 00dc 1360     		str	r3, [r2]
 254              	.L20:
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 255              		.loc 1 437 3 view .LVU86
 256 00de A368     		ldr	r3, [r4, #8]
 257 00e0 E268     		ldr	r2, [r4, #12]
 258 00e2 1343     		orrs	r3, r3, r2
 259 00e4 2269     		ldr	r2, [r4, #16]
ARM GAS  /tmp/cc2z0qN7.s 			page 16


 260 00e6 1343     		orrs	r3, r3, r2
 261 00e8 6269     		ldr	r2, [r4, #20]
 262 00ea 1343     		orrs	r3, r3, r2
 263 00ec 6268     		ldr	r2, [r4, #4]
 264 00ee 013A     		subs	r2, r2, #1
 265 00f0 2168     		ldr	r1, [r4]
 266 00f2 1343     		orrs	r3, r3, r2
 267 00f4 CB61     		str	r3, [r1, #28]
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 268              		.loc 1 444 3 view .LVU87
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 269              		.loc 1 444 19 is_stmt 0 view .LVU88
 270 00f6 0020     		movs	r0, #0
 271 00f8 6062     		str	r0, [r4, #36]
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 272              		.loc 1 447 3 is_stmt 1 view .LVU89
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 273              		.loc 1 447 15 is_stmt 0 view .LVU90
 274 00fa 0123     		movs	r3, #1
 275 00fc 84F82030 		strb	r3, [r4, #32]
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 276              		.loc 1 450 3 is_stmt 1 view .LVU91
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 277              		.loc 1 450 10 is_stmt 0 view .LVU92
 278 0100 A0E7     		b	.L3
 279              	.L29:
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 280              		.loc 1 379 5 is_stmt 1 view .LVU93
 281 0102 1A68     		ldr	r2, [r3]
 282 0104 42F08002 		orr	r2, r2, #128
 283 0108 1A60     		str	r2, [r3]
 284 010a C0E7     		b	.L10
 285              	.L30:
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 286              		.loc 1 389 5 view .LVU94
 287 010c 2268     		ldr	r2, [r4]
 288 010e 1368     		ldr	r3, [r2]
 289 0110 43F04003 		orr	r3, r3, #64
 290 0114 1360     		str	r3, [r2]
 291 0116 C2E7     		b	.L12
 292              	.L31:
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 293              		.loc 1 399 5 view .LVU95
 294 0118 2268     		ldr	r2, [r4]
 295 011a 1368     		ldr	r3, [r2]
 296 011c 43F02003 		orr	r3, r3, #32
 297 0120 1360     		str	r3, [r2]
 298 0122 C4E7     		b	.L14
 299              	.L32:
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 300              		.loc 1 409 5 view .LVU96
 301 0124 2268     		ldr	r2, [r4]
 302 0126 1368     		ldr	r3, [r2]
 303 0128 23F01003 		bic	r3, r3, #16
 304 012c 1360     		str	r3, [r2]
 305 012e C6E7     		b	.L16
 306              	.L33:
ARM GAS  /tmp/cc2z0qN7.s 			page 17


 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 307              		.loc 1 419 5 view .LVU97
 308 0130 2268     		ldr	r2, [r4]
 309 0132 1368     		ldr	r3, [r2]
 310 0134 43F00803 		orr	r3, r3, #8
 311 0138 1360     		str	r3, [r2]
 312 013a C8E7     		b	.L18
 313              	.L34:
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 314              		.loc 1 429 5 view .LVU98
 315 013c 2268     		ldr	r2, [r4]
 316 013e 1368     		ldr	r3, [r2]
 317 0140 43F00403 		orr	r3, r3, #4
 318 0144 1360     		str	r3, [r2]
 319 0146 CAE7     		b	.L20
 320              	.LVL12:
 321              	.L21:
 322              	.LCFI1:
 323              		.cfi_def_cfa_offset 0
 324              		.cfi_restore 3
 325              		.cfi_restore 4
 326              		.cfi_restore 5
 327              		.cfi_restore 14
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 328              		.loc 1 282 12 is_stmt 0 view .LVU99
 329 0148 0120     		movs	r0, #1
 330              	.LVL13:
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 331              		.loc 1 451 1 view .LVU100
 332 014a 7047     		bx	lr
 333              		.cfi_endproc
 334              	.LFE65:
 336              		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 337              		.align	1
 338              		.weak	HAL_CAN_MspDeInit
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu softvfp
 344              	HAL_CAN_MspDeInit:
 345              	.LVL14:
 346              	.LFB68:
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 347              		.loc 1 524 1 is_stmt 1 view -0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              		@ link register save eliminated.
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/cc2z0qN7.s 			page 18


 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 352              		.loc 1 526 3 view .LVU102
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 353              		.loc 1 531 1 is_stmt 0 view .LVU103
 354 0000 7047     		bx	lr
 355              		.cfi_endproc
 356              	.LFE68:
 358              		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 359              		.align	1
 360              		.global	HAL_CAN_ConfigFilter
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu softvfp
 366              	HAL_CAN_ConfigFilter:
 367              	.LVL15:
 368              	.LFB69:
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Register a CAN CallBack.
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         To be used instead of the weak predefined callback
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for CAN module
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  CallbackID ID of the callback to be registered
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one of the following values:
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pCallback pointer to the Callback function
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Callb
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                            void (* pCallback)(CAN_HandleTypeDef *_hcan))
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (pCallback == NULL)
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update the error code */
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
ARM GAS  /tmp/cc2z0qN7.s 			page 19


 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = pCallback;
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = pCallback;
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = pCallback;
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = pCallback;
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = pCallback;
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = pCallback;
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = pCallback;
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0FullCallback = pCallback;
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = pCallback;
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1FullCallback = pCallback;
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->SleepCallback = pCallback;
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = pCallback;
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
ARM GAS  /tmp/cc2z0qN7.s 			page 20


 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCallback = pCallback;
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update the error code */
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return error status */
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status =  HAL_ERROR;
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Unregister a CAN CallBack.
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         CAN callback is redirected to the weak predefined callback
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
ARM GAS  /tmp/cc2z0qN7.s 			page 21


 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for CAN module
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  CallbackID ID of the callback to be unregistered
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one of the following values:
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_UnRegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Cal
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = HAL_CAN_TxMailbox0CompleteCallback;
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = HAL_CAN_TxMailbox1CompleteCallback;
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = HAL_CAN_TxMailbox2CompleteCallback;
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = HAL_CAN_TxMailbox0AbortCallback;
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = HAL_CAN_TxMailbox1AbortCallback;
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = HAL_CAN_TxMailbox2AbortCallback;
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = HAL_CAN_RxFifo0MsgPendingCallback;
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
ARM GAS  /tmp/cc2z0qN7.s 			page 22


 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo0FullCallback = HAL_CAN_RxFifo0FullCallback;
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = HAL_CAN_RxFifo1MsgPendingCallback;
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->RxFifo1FullCallback = HAL_CAN_RxFifo1FullCallback;
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->SleepCallback = HAL_CAN_SleepCallback;
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = HAL_CAN_WakeUpFromRxMsgCallback;
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCallback = HAL_CAN_ErrorCallback;
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     switch (CallbackID)
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       default :
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update the error code */
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Return error status */
ARM GAS  /tmp/cc2z0qN7.s 			page 23


 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         status =  HAL_ERROR;
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         break;
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update the error code */
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return error status */
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status =  HAL_ERROR;
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief    Configuration functions.
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Configuration functions #####
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         contains the filter configuration information.
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterCon
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 369              		.loc 1 841 1 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 374              		.loc 1 842 3 view .LVU105
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 375              		.loc 1 843 3 view .LVU106
 376              		.loc 1 843 16 is_stmt 0 view .LVU107
 377 0000 0268     		ldr	r2, [r0]
ARM GAS  /tmp/cc2z0qN7.s 			page 24


 378              	.LVL16:
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 379              		.loc 1 844 3 is_stmt 1 view .LVU108
 380              		.loc 1 844 24 is_stmt 0 view .LVU109
 381 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 382              	.LVL17:
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 383              		.loc 1 846 3 is_stmt 1 view .LVU110
 384              		.loc 1 846 38 is_stmt 0 view .LVU111
 385 0006 013B     		subs	r3, r3, #1
 386              	.LVL18:
 387              		.loc 1 846 38 view .LVU112
 388 0008 DBB2     		uxtb	r3, r3
 389              		.loc 1 846 6 view .LVU113
 390 000a 012B     		cmp	r3, #1
 391 000c 05D9     		bls	.L50
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select master instance to access the filter banks */
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     can_ip = CAN1;
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* CAN3 */
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Initialisation mode for the filter */
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* CAN3 */
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Convert filter number into bit position */
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Deactivation */
ARM GAS  /tmp/cc2z0qN7.s 			page 25


 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Scale */
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 16-bit scale for the filter */
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit scale for the filter */
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Mode */
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Identifier list mode for the filter*/
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter FIFO assignment */
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/cc2z0qN7.s 			page 26


 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter activation */
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 392              		.loc 1 963 5 is_stmt 1 view .LVU114
 393              		.loc 1 963 21 is_stmt 0 view .LVU115
 394 000e 436A     		ldr	r3, [r0, #36]
 395 0010 43F48023 		orr	r3, r3, #262144
 396 0014 4362     		str	r3, [r0, #36]
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 397              		.loc 1 965 5 is_stmt 1 view .LVU116
 398              		.loc 1 965 12 is_stmt 0 view .LVU117
 399 0016 0120     		movs	r0, #1
 400              	.LVL19:
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 401              		.loc 1 967 1 view .LVU118
 402 0018 7047     		bx	lr
 403              	.LVL20:
 404              	.L50:
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 405              		.loc 1 841 1 view .LVU119
 406 001a 70B4     		push	{r4, r5, r6}
 407              	.LCFI2:
 408              		.cfi_def_cfa_offset 12
 409              		.cfi_offset 4, -12
 410              		.cfi_offset 5, -8
 411              		.cfi_offset 6, -4
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 412              		.loc 1 850 5 is_stmt 1 view .LVU120
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 413              		.loc 1 851 5 view .LVU121
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 414              		.loc 1 852 5 view .LVU122
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 415              		.loc 1 853 5 view .LVU123
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 416              		.loc 1 854 5 view .LVU124
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 417              		.loc 1 855 5 view .LVU125
ARM GAS  /tmp/cc2z0qN7.s 			page 27


 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 418              		.loc 1 856 5 view .LVU126
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 419              		.loc 1 857 5 view .LVU127
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* CAN3 */
 420              		.loc 1 871 5 view .LVU128
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 421              		.loc 1 875 5 view .LVU129
 422 001c D2F80032 		ldr	r3, [r2, #512]
 423 0020 43F00103 		orr	r3, r3, #1
 424 0024 C2F80032 		str	r3, [r2, #512]
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 425              		.loc 1 884 5 view .LVU130
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 426              		.loc 1 884 52 is_stmt 0 view .LVU131
 427 0028 4B69     		ldr	r3, [r1, #20]
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 428              		.loc 1 884 65 view .LVU132
 429 002a 03F01F03 		and	r3, r3, #31
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 430              		.loc 1 884 21 view .LVU133
 431 002e 0120     		movs	r0, #1
 432              	.LVL21:
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 433              		.loc 1 884 21 view .LVU134
 434 0030 00FA03F3 		lsl	r3, r0, r3
 435              	.LVL22:
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 436              		.loc 1 887 5 is_stmt 1 view .LVU135
 437 0034 D2F81C02 		ldr	r0, [r2, #540]
 438 0038 DC43     		mvns	r4, r3
 439 003a 20EA0300 		bic	r0, r0, r3
 440 003e C2F81C02 		str	r0, [r2, #540]
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 441              		.loc 1 890 5 view .LVU136
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 442              		.loc 1 890 22 is_stmt 0 view .LVU137
 443 0042 C869     		ldr	r0, [r1, #28]
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 444              		.loc 1 890 8 view .LVU138
 445 0044 A8B9     		cbnz	r0, .L38
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 446              		.loc 1 893 7 is_stmt 1 view .LVU139
 447 0046 D2F80C02 		ldr	r0, [r2, #524]
 448 004a 2040     		ands	r0, r0, r4
 449 004c C2F80C02 		str	r0, [r2, #524]
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 450              		.loc 1 897 7 view .LVU140
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 451              		.loc 1 898 48 is_stmt 0 view .LVU141
 452 0050 CE68     		ldr	r6, [r1, #12]
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 453              		.loc 1 899 22 view .LVU142
 454 0052 8D88     		ldrh	r5, [r1, #4]
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 455              		.loc 1 897 44 view .LVU143
 456 0054 4869     		ldr	r0, [r1, #20]
ARM GAS  /tmp/cc2z0qN7.s 			page 28


 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 457              		.loc 1 898 75 view .LVU144
 458 0056 45EA0645 		orr	r5, r5, r6, lsl #16
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 459              		.loc 1 897 62 view .LVU145
 460 005a 4830     		adds	r0, r0, #72
 461 005c 42F83050 		str	r5, [r2, r0, lsl #3]
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 462              		.loc 1 903 7 is_stmt 1 view .LVU146
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 463              		.loc 1 904 48 is_stmt 0 view .LVU147
 464 0060 8E68     		ldr	r6, [r1, #8]
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 465              		.loc 1 905 22 view .LVU148
 466 0062 0D88     		ldrh	r5, [r1]
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 467              		.loc 1 903 44 view .LVU149
 468 0064 4869     		ldr	r0, [r1, #20]
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 469              		.loc 1 904 76 view .LVU150
 470 0066 45EA0645 		orr	r5, r5, r6, lsl #16
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 471              		.loc 1 903 62 view .LVU151
 472 006a 4830     		adds	r0, r0, #72
 473 006c 02EBC000 		add	r0, r2, r0, lsl #3
 474 0070 4560     		str	r5, [r0, #4]
 475              	.L38:
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 476              		.loc 1 908 5 is_stmt 1 view .LVU152
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 477              		.loc 1 908 22 is_stmt 0 view .LVU153
 478 0072 C869     		ldr	r0, [r1, #28]
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 479              		.loc 1 908 8 view .LVU154
 480 0074 0128     		cmp	r0, #1
 481 0076 19D0     		beq	.L51
 482              	.L39:
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 483              		.loc 1 925 5 is_stmt 1 view .LVU155
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 484              		.loc 1 925 22 is_stmt 0 view .LVU156
 485 0078 8869     		ldr	r0, [r1, #24]
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 486              		.loc 1 925 8 view .LVU157
 487 007a 70BB     		cbnz	r0, .L40
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 488              		.loc 1 928 7 is_stmt 1 view .LVU158
 489 007c D2F80402 		ldr	r0, [r2, #516]
 490 0080 2040     		ands	r0, r0, r4
 491 0082 C2F80402 		str	r0, [r2, #516]
 492              	.L41:
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 493              		.loc 1 937 5 view .LVU159
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 494              		.loc 1 937 22 is_stmt 0 view .LVU160
 495 0086 0869     		ldr	r0, [r1, #16]
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/cc2z0qN7.s 			page 29


 496              		.loc 1 937 8 view .LVU161
 497 0088 68BB     		cbnz	r0, .L42
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 498              		.loc 1 940 7 is_stmt 1 view .LVU162
 499 008a D2F81402 		ldr	r0, [r2, #532]
 500 008e 0440     		ands	r4, r4, r0
 501 0090 C2F81442 		str	r4, [r2, #532]
 502              	.L43:
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 503              		.loc 1 949 5 view .LVU163
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 504              		.loc 1 949 22 is_stmt 0 view .LVU164
 505 0094 096A     		ldr	r1, [r1, #32]
 506              	.LVL23:
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 507              		.loc 1 949 8 view .LVU165
 508 0096 0129     		cmp	r1, #1
 509 0098 2BD0     		beq	.L52
 510              	.LVL24:
 511              	.L44:
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 512              		.loc 1 955 5 is_stmt 1 view .LVU166
 513 009a D2F80032 		ldr	r3, [r2, #512]
 514 009e 23F00103 		bic	r3, r3, #1
 515 00a2 C2F80032 		str	r3, [r2, #512]
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 516              		.loc 1 958 5 view .LVU167
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 517              		.loc 1 958 12 is_stmt 0 view .LVU168
 518 00a6 0020     		movs	r0, #0
 519              		.loc 1 967 1 view .LVU169
 520 00a8 70BC     		pop	{r4, r5, r6}
 521              	.LCFI3:
 522              		.cfi_remember_state
 523              		.cfi_restore 6
 524              		.cfi_restore 5
 525              		.cfi_restore 4
 526              		.cfi_def_cfa_offset 0
 527 00aa 7047     		bx	lr
 528              	.LVL25:
 529              	.L51:
 530              	.LCFI4:
 531              		.cfi_restore_state
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 532              		.loc 1 911 7 is_stmt 1 view .LVU170
 533 00ac D2F80C02 		ldr	r0, [r2, #524]
 534 00b0 1843     		orrs	r0, r0, r3
 535 00b2 C2F80C02 		str	r0, [r2, #524]
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 536              		.loc 1 914 7 view .LVU171
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 537              		.loc 1 915 48 is_stmt 0 view .LVU172
 538 00b6 0E68     		ldr	r6, [r1]
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 539              		.loc 1 916 22 view .LVU173
 540 00b8 8D88     		ldrh	r5, [r1, #4]
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
ARM GAS  /tmp/cc2z0qN7.s 			page 30


 541              		.loc 1 914 44 view .LVU174
 542 00ba 4869     		ldr	r0, [r1, #20]
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 543              		.loc 1 915 72 view .LVU175
 544 00bc 45EA0645 		orr	r5, r5, r6, lsl #16
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 545              		.loc 1 914 62 view .LVU176
 546 00c0 4830     		adds	r0, r0, #72
 547 00c2 42F83050 		str	r5, [r2, r0, lsl #3]
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 548              		.loc 1 919 7 is_stmt 1 view .LVU177
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 549              		.loc 1 920 48 is_stmt 0 view .LVU178
 550 00c6 8E68     		ldr	r6, [r1, #8]
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 551              		.loc 1 921 22 view .LVU179
 552 00c8 8D89     		ldrh	r5, [r1, #12]
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 553              		.loc 1 919 44 view .LVU180
 554 00ca 4869     		ldr	r0, [r1, #20]
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 555              		.loc 1 920 76 view .LVU181
 556 00cc 45EA0645 		orr	r5, r5, r6, lsl #16
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 557              		.loc 1 919 62 view .LVU182
 558 00d0 4830     		adds	r0, r0, #72
 559 00d2 02EBC000 		add	r0, r2, r0, lsl #3
 560 00d6 4560     		str	r5, [r0, #4]
 561 00d8 CEE7     		b	.L39
 562              	.L40:
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 563              		.loc 1 933 7 is_stmt 1 view .LVU183
 564 00da D2F80402 		ldr	r0, [r2, #516]
 565 00de 1843     		orrs	r0, r0, r3
 566 00e0 C2F80402 		str	r0, [r2, #516]
 567 00e4 CFE7     		b	.L41
 568              	.L42:
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 569              		.loc 1 945 7 view .LVU184
 570 00e6 D2F81402 		ldr	r0, [r2, #532]
 571 00ea 1843     		orrs	r0, r0, r3
 572 00ec C2F81402 		str	r0, [r2, #532]
 573 00f0 D0E7     		b	.L43
 574              	.LVL26:
 575              	.L52:
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 576              		.loc 1 951 7 view .LVU185
 577 00f2 D2F81C12 		ldr	r1, [r2, #540]
 578 00f6 0B43     		orrs	r3, r3, r1
 579              	.LVL27:
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 580              		.loc 1 951 7 is_stmt 0 view .LVU186
 581 00f8 C2F81C32 		str	r3, [r2, #540]
 582 00fc CDE7     		b	.L44
 583              		.cfi_endproc
 584              	.LFE69:
 586              		.section	.text.HAL_CAN_Start,"ax",%progbits
ARM GAS  /tmp/cc2z0qN7.s 			page 31


 587              		.align	1
 588              		.global	HAL_CAN_Start
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 592              		.fpu softvfp
 594              	HAL_CAN_Start:
 595              	.LVL28:
 596              	.LFB70:
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief    Control functions
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                       ##### Control functions #####
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              and activate the corresponding
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              transmission request
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              pending on the selected Tx mailbox
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Start the CAN module.
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 597              		.loc 1 1007 1 is_stmt 1 view -0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601              		.loc 1 1007 1 is_stmt 0 view .LVU188
 602 0000 70B5     		push	{r4, r5, r6, lr}
 603              	.LCFI5:
 604              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc2z0qN7.s 			page 32


 605              		.cfi_offset 4, -16
 606              		.cfi_offset 5, -12
 607              		.cfi_offset 6, -8
 608              		.cfi_offset 14, -4
 609 0002 0446     		mov	r4, r0
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 610              		.loc 1 1008 3 is_stmt 1 view .LVU189
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 611              		.loc 1 1010 3 view .LVU190
 612              		.loc 1 1010 11 is_stmt 0 view .LVU191
 613 0004 90F82050 		ldrb	r5, [r0, #32]	@ zero_extendqisi2
 614 0008 EDB2     		uxtb	r5, r5
 615              		.loc 1 1010 6 view .LVU192
 616 000a 012D     		cmp	r5, #1
 617 000c 06D0     		beq	.L59
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request leave initialisation */
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset the CAN ErrorCode */
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 618              		.loc 1 1046 5 is_stmt 1 view .LVU193
 619              		.loc 1 1046 21 is_stmt 0 view .LVU194
 620 000e 436A     		ldr	r3, [r0, #36]
 621 0010 43F40023 		orr	r3, r3, #524288
 622 0014 4362     		str	r3, [r0, #36]
ARM GAS  /tmp/cc2z0qN7.s 			page 33


1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 623              		.loc 1 1048 5 is_stmt 1 view .LVU195
 624              		.loc 1 1048 12 is_stmt 0 view .LVU196
 625 0016 0125     		movs	r5, #1
 626              	.LVL29:
 627              	.L56:
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 628              		.loc 1 1050 1 view .LVU197
 629 0018 2846     		mov	r0, r5
 630 001a 70BD     		pop	{r4, r5, r6, pc}
 631              	.LVL30:
 632              	.L59:
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 633              		.loc 1 1013 5 is_stmt 1 view .LVU198
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 634              		.loc 1 1013 17 is_stmt 0 view .LVU199
 635 001c 0223     		movs	r3, #2
 636 001e 80F82030 		strb	r3, [r0, #32]
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 637              		.loc 1 1016 5 is_stmt 1 view .LVU200
 638 0022 0268     		ldr	r2, [r0]
 639 0024 1368     		ldr	r3, [r2]
 640 0026 23F00103 		bic	r3, r3, #1
 641 002a 1360     		str	r3, [r2]
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 642              		.loc 1 1019 5 view .LVU201
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 643              		.loc 1 1019 17 is_stmt 0 view .LVU202
 644 002c FFF7FEFF 		bl	HAL_GetTick
 645              	.LVL31:
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 646              		.loc 1 1019 17 view .LVU203
 647 0030 0646     		mov	r6, r0
 648              	.LVL32:
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 649              		.loc 1 1022 5 is_stmt 1 view .LVU204
 650              	.L55:
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 651              		.loc 1 1022 11 view .LVU205
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 652              		.loc 1 1022 17 is_stmt 0 view .LVU206
 653 0032 2368     		ldr	r3, [r4]
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 654              		.loc 1 1022 27 view .LVU207
 655 0034 5B68     		ldr	r3, [r3, #4]
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 656              		.loc 1 1022 11 view .LVU208
 657 0036 13F0010F 		tst	r3, #1
 658 003a 0CD0     		beq	.L60
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 659              		.loc 1 1025 7 is_stmt 1 view .LVU209
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 660              		.loc 1 1025 12 is_stmt 0 view .LVU210
 661 003c FFF7FEFF 		bl	HAL_GetTick
 662              	.LVL33:
ARM GAS  /tmp/cc2z0qN7.s 			page 34


1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 663              		.loc 1 1025 26 view .LVU211
 664 0040 831B     		subs	r3, r0, r6
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 665              		.loc 1 1025 10 view .LVU212
 666 0042 0A2B     		cmp	r3, #10
 667 0044 F5D9     		bls	.L55
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 668              		.loc 1 1028 9 is_stmt 1 view .LVU213
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 669              		.loc 1 1028 25 is_stmt 0 view .LVU214
 670 0046 636A     		ldr	r3, [r4, #36]
 671 0048 43F40033 		orr	r3, r3, #131072
 672 004c 6362     		str	r3, [r4, #36]
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 673              		.loc 1 1031 9 is_stmt 1 view .LVU215
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 674              		.loc 1 1031 21 is_stmt 0 view .LVU216
 675 004e 0523     		movs	r3, #5
 676 0050 84F82030 		strb	r3, [r4, #32]
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 677              		.loc 1 1033 9 is_stmt 1 view .LVU217
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 678              		.loc 1 1033 16 is_stmt 0 view .LVU218
 679 0054 E0E7     		b	.L56
 680              	.L60:
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 681              		.loc 1 1038 5 is_stmt 1 view .LVU219
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 682              		.loc 1 1038 21 is_stmt 0 view .LVU220
 683 0056 0025     		movs	r5, #0
 684 0058 6562     		str	r5, [r4, #36]
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 685              		.loc 1 1041 5 is_stmt 1 view .LVU221
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 686              		.loc 1 1041 12 is_stmt 0 view .LVU222
 687 005a DDE7     		b	.L56
 688              		.cfi_endproc
 689              	.LFE70:
 691              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 692              		.align	1
 693              		.global	HAL_CAN_Stop
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 697              		.fpu softvfp
 699              	HAL_CAN_Stop:
 700              	.LVL34:
 701              	.LFB71:
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
ARM GAS  /tmp/cc2z0qN7.s 			page 35


1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 702              		.loc 1 1059 1 is_stmt 1 view -0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              		.loc 1 1059 1 is_stmt 0 view .LVU224
 707 0000 38B5     		push	{r3, r4, r5, lr}
 708              	.LCFI6:
 709              		.cfi_def_cfa_offset 16
 710              		.cfi_offset 3, -16
 711              		.cfi_offset 4, -12
 712              		.cfi_offset 5, -8
 713              		.cfi_offset 14, -4
 714 0002 0446     		mov	r4, r0
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 715              		.loc 1 1060 3 is_stmt 1 view .LVU225
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 716              		.loc 1 1062 3 view .LVU226
 717              		.loc 1 1062 11 is_stmt 0 view .LVU227
 718 0004 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 719 0008 DBB2     		uxtb	r3, r3
 720              		.loc 1 1062 6 view .LVU228
 721 000a 022B     		cmp	r3, #2
 722 000c 05D0     		beq	.L67
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request initialisation */
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Exit from sleep mode */
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
ARM GAS  /tmp/cc2z0qN7.s 			page 36


1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 723              		.loc 1 1098 5 is_stmt 1 view .LVU229
 724              		.loc 1 1098 21 is_stmt 0 view .LVU230
 725 000e 436A     		ldr	r3, [r0, #36]
 726 0010 43F48013 		orr	r3, r3, #1048576
 727 0014 4362     		str	r3, [r0, #36]
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 728              		.loc 1 1100 5 is_stmt 1 view .LVU231
 729              		.loc 1 1100 12 is_stmt 0 view .LVU232
 730 0016 0120     		movs	r0, #1
 731              	.LVL35:
 732              	.L64:
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 733              		.loc 1 1102 1 view .LVU233
 734 0018 38BD     		pop	{r3, r4, r5, pc}
 735              	.LVL36:
 736              	.L67:
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 737              		.loc 1 1065 5 is_stmt 1 view .LVU234
 738 001a 0268     		ldr	r2, [r0]
 739 001c 1368     		ldr	r3, [r2]
 740 001e 43F00103 		orr	r3, r3, #1
 741 0022 1360     		str	r3, [r2]
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 742              		.loc 1 1068 5 view .LVU235
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 743              		.loc 1 1068 17 is_stmt 0 view .LVU236
 744 0024 FFF7FEFF 		bl	HAL_GetTick
 745              	.LVL37:
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 746              		.loc 1 1068 17 view .LVU237
 747 0028 0546     		mov	r5, r0
 748              	.LVL38:
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 749              		.loc 1 1071 5 is_stmt 1 view .LVU238
 750              	.L63:
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 751              		.loc 1 1071 11 view .LVU239
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 752              		.loc 1 1071 17 is_stmt 0 view .LVU240
 753 002a 2368     		ldr	r3, [r4]
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 754              		.loc 1 1071 27 view .LVU241
 755 002c 5A68     		ldr	r2, [r3, #4]
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 756              		.loc 1 1071 11 view .LVU242
 757 002e 12F0010F 		tst	r2, #1
 758 0032 0DD1     		bne	.L68
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 759              		.loc 1 1074 7 is_stmt 1 view .LVU243
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 760              		.loc 1 1074 12 is_stmt 0 view .LVU244
ARM GAS  /tmp/cc2z0qN7.s 			page 37


 761 0034 FFF7FEFF 		bl	HAL_GetTick
 762              	.LVL39:
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 763              		.loc 1 1074 26 view .LVU245
 764 0038 431B     		subs	r3, r0, r5
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 765              		.loc 1 1074 10 view .LVU246
 766 003a 0A2B     		cmp	r3, #10
 767 003c F5D9     		bls	.L63
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 768              		.loc 1 1077 9 is_stmt 1 view .LVU247
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 769              		.loc 1 1077 25 is_stmt 0 view .LVU248
 770 003e 636A     		ldr	r3, [r4, #36]
 771 0040 43F40033 		orr	r3, r3, #131072
 772 0044 6362     		str	r3, [r4, #36]
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 773              		.loc 1 1080 9 is_stmt 1 view .LVU249
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 774              		.loc 1 1080 21 is_stmt 0 view .LVU250
 775 0046 0523     		movs	r3, #5
 776 0048 84F82030 		strb	r3, [r4, #32]
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 777              		.loc 1 1082 9 is_stmt 1 view .LVU251
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 778              		.loc 1 1082 16 is_stmt 0 view .LVU252
 779 004c 0120     		movs	r0, #1
 780 004e E3E7     		b	.L64
 781              	.L68:
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 782              		.loc 1 1087 5 is_stmt 1 view .LVU253
 783 0050 1A68     		ldr	r2, [r3]
 784 0052 22F00202 		bic	r2, r2, #2
 785 0056 1A60     		str	r2, [r3]
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 786              		.loc 1 1090 5 view .LVU254
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 787              		.loc 1 1090 17 is_stmt 0 view .LVU255
 788 0058 0123     		movs	r3, #1
 789 005a 84F82030 		strb	r3, [r4, #32]
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 790              		.loc 1 1093 5 is_stmt 1 view .LVU256
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 791              		.loc 1 1093 12 is_stmt 0 view .LVU257
 792 005e 0020     		movs	r0, #0
 793 0060 DAE7     		b	.L64
 794              		.cfi_endproc
 795              	.LFE71:
 797              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 798              		.align	1
 799              		.global	HAL_CAN_DeInit
 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 803              		.fpu softvfp
 805              	HAL_CAN_DeInit:
 806              	.LVL40:
ARM GAS  /tmp/cc2z0qN7.s 			page 38


 807              	.LFB66:
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 808              		.loc 1 461 1 is_stmt 1 view -0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 812              		.loc 1 463 3 view .LVU259
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 813              		.loc 1 463 6 is_stmt 0 view .LVU260
 814 0000 80B1     		cbz	r0, .L71
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 815              		.loc 1 461 1 view .LVU261
 816 0002 10B5     		push	{r4, lr}
 817              	.LCFI7:
 818              		.cfi_def_cfa_offset 8
 819              		.cfi_offset 4, -8
 820              		.cfi_offset 14, -4
 821 0004 0446     		mov	r4, r0
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 822              		.loc 1 469 3 is_stmt 1 view .LVU262
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 823              		.loc 1 472 3 view .LVU263
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 824              		.loc 1 472 9 is_stmt 0 view .LVU264
 825 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 826              	.LVL41:
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 827              		.loc 1 485 3 is_stmt 1 view .LVU265
 828 000a 2046     		mov	r0, r4
 829 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 830              	.LVL42:
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 831              		.loc 1 489 3 view .LVU266
 832 0010 2268     		ldr	r2, [r4]
 833 0012 1368     		ldr	r3, [r2]
 834 0014 43F40043 		orr	r3, r3, #32768
 835 0018 1360     		str	r3, [r2]
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 836              		.loc 1 492 3 view .LVU267
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 837              		.loc 1 492 19 is_stmt 0 view .LVU268
 838 001a 0020     		movs	r0, #0
 839 001c 6062     		str	r0, [r4, #36]
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 840              		.loc 1 495 3 is_stmt 1 view .LVU269
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 841              		.loc 1 495 15 is_stmt 0 view .LVU270
 842 001e 84F82000 		strb	r0, [r4, #32]
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 843              		.loc 1 498 3 is_stmt 1 view .LVU271
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 844              		.loc 1 499 1 is_stmt 0 view .LVU272
 845 0022 10BD     		pop	{r4, pc}
 846              	.LVL43:
 847              	.L71:
 848              	.LCFI8:
ARM GAS  /tmp/cc2z0qN7.s 			page 39


 849              		.cfi_def_cfa_offset 0
 850              		.cfi_restore 4
 851              		.cfi_restore 14
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 852              		.loc 1 465 12 view .LVU273
 853 0024 0120     		movs	r0, #1
 854              	.LVL44:
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 855              		.loc 1 499 1 view .LVU274
 856 0026 7047     		bx	lr
 857              		.cfi_endproc
 858              	.LFE66:
 860              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 861              		.align	1
 862              		.global	HAL_CAN_RequestSleep
 863              		.syntax unified
 864              		.thumb
 865              		.thumb_func
 866              		.fpu softvfp
 868              	HAL_CAN_RequestSleep:
 869              	.LVL45:
 870              	.LFB72:
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of a CAN frame) has been completed.
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 871              		.loc 1 1114 1 is_stmt 1 view -0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875              		@ link register save eliminated.
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 876              		.loc 1 1115 3 view .LVU276
 877              		.loc 1 1115 24 is_stmt 0 view .LVU277
 878 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 879              	.LVL46:
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 880              		.loc 1 1117 3 is_stmt 1 view .LVU278
 881              		.loc 1 1117 38 is_stmt 0 view .LVU279
 882 0004 013B     		subs	r3, r3, #1
 883              	.LVL47:
 884              		.loc 1 1117 38 view .LVU280
 885 0006 DBB2     		uxtb	r3, r3
 886              		.loc 1 1117 6 view .LVU281
 887 0008 012B     		cmp	r3, #1
 888 000a 05D9     		bls	.L79
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  /tmp/cc2z0qN7.s 			page 40


1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request Sleep mode */
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 889              		.loc 1 1129 5 is_stmt 1 view .LVU282
 890              		.loc 1 1129 21 is_stmt 0 view .LVU283
 891 000c 436A     		ldr	r3, [r0, #36]
 892 000e 43F48023 		orr	r3, r3, #262144
 893 0012 4362     		str	r3, [r0, #36]
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 894              		.loc 1 1132 5 is_stmt 1 view .LVU284
 895              		.loc 1 1132 12 is_stmt 0 view .LVU285
 896 0014 0120     		movs	r0, #1
 897              	.LVL48:
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 898              		.loc 1 1134 1 view .LVU286
 899 0016 7047     		bx	lr
 900              	.LVL49:
 901              	.L79:
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 902              		.loc 1 1121 5 is_stmt 1 view .LVU287
 903 0018 0268     		ldr	r2, [r0]
 904 001a 1368     		ldr	r3, [r2]
 905 001c 43F00203 		orr	r3, r3, #2
 906 0020 1360     		str	r3, [r2]
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 907              		.loc 1 1124 5 view .LVU288
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 908              		.loc 1 1124 12 is_stmt 0 view .LVU289
 909 0022 0020     		movs	r0, #0
 910              	.LVL50:
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 911              		.loc 1 1124 12 view .LVU290
 912 0024 7047     		bx	lr
 913              		.cfi_endproc
 914              	.LFE72:
 916              		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 917              		.align	1
 918              		.global	HAL_CAN_WakeUp
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu softvfp
 924              	HAL_CAN_WakeUp:
 925              	.LVL51:
 926              	.LFB73:
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
ARM GAS  /tmp/cc2z0qN7.s 			page 41


1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Wake up from sleep mode.
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         is exited.
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 927              		.loc 1 1145 1 is_stmt 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 8
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              		@ link register save eliminated.
 932              		.loc 1 1145 1 is_stmt 0 view .LVU292
 933 0000 82B0     		sub	sp, sp, #8
 934              	.LCFI9:
 935              		.cfi_def_cfa_offset 8
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   __IO uint32_t count = 0;
 936              		.loc 1 1146 3 is_stmt 1 view .LVU293
 937              		.loc 1 1146 17 is_stmt 0 view .LVU294
 938 0002 0023     		movs	r3, #0
 939 0004 0193     		str	r3, [sp, #4]
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 940              		.loc 1 1147 3 is_stmt 1 view .LVU295
 941              		.loc 1 1147 24 is_stmt 0 view .LVU296
 942 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 943              	.LVL52:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 944              		.loc 1 1149 3 is_stmt 1 view .LVU297
 945              		.loc 1 1149 38 is_stmt 0 view .LVU298
 946 000a 013B     		subs	r3, r3, #1
 947              	.LVL53:
 948              		.loc 1 1149 38 view .LVU299
 949 000c DBB2     		uxtb	r3, r3
 950              		.loc 1 1149 6 view .LVU300
 951 000e 012B     		cmp	r3, #1
 952 0010 18D8     		bhi	.L81
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wake up request */
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 953              		.loc 1 1153 5 is_stmt 1 view .LVU301
 954 0012 0268     		ldr	r2, [r0]
 955 0014 1368     		ldr	r3, [r2]
 956 0016 23F00203 		bic	r3, r3, #2
 957 001a 1360     		str	r3, [r2]
 958              	.L84:
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait sleep mode is exited */
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     do
 959              		.loc 1 1156 5 view .LVU302
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Increment counter */
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       count++;
 960              		.loc 1 1159 7 view .LVU303
ARM GAS  /tmp/cc2z0qN7.s 			page 42


 961              		.loc 1 1159 12 is_stmt 0 view .LVU304
 962 001c 019B     		ldr	r3, [sp, #4]
 963 001e 0133     		adds	r3, r3, #1
 964 0020 0193     		str	r3, [sp, #4]
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check if timeout is reached */
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (count > CAN_WAKEUP_TIMEOUT_COUNTER)
 965              		.loc 1 1162 7 is_stmt 1 view .LVU305
 966              		.loc 1 1162 17 is_stmt 0 view .LVU306
 967 0022 019A     		ldr	r2, [sp, #4]
 968              		.loc 1 1162 10 view .LVU307
 969 0024 0B4B     		ldr	r3, .L87
 970 0026 9A42     		cmp	r2, r3
 971 0028 06D8     		bhi	.L86
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     } while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 972              		.loc 1 1169 13 is_stmt 1 view .LVU308
 973              		.loc 1 1169 19 is_stmt 0 view .LVU309
 974 002a 0368     		ldr	r3, [r0]
 975              		.loc 1 1169 29 view .LVU310
 976 002c 5B68     		ldr	r3, [r3, #4]
 977              		.loc 1 1169 5 view .LVU311
 978 002e 13F0020F 		tst	r3, #2
 979 0032 F3D1     		bne	.L84
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 980              		.loc 1 1172 12 view .LVU312
 981 0034 0020     		movs	r0, #0
 982              	.LVL54:
 983              		.loc 1 1172 12 view .LVU313
 984 0036 0AE0     		b	.L83
 985              	.LVL55:
 986              	.L86:
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 987              		.loc 1 1165 9 is_stmt 1 view .LVU314
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 988              		.loc 1 1165 25 is_stmt 0 view .LVU315
 989 0038 436A     		ldr	r3, [r0, #36]
 990 003a 43F40033 		orr	r3, r3, #131072
 991 003e 4362     		str	r3, [r0, #36]
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 992              		.loc 1 1167 9 is_stmt 1 view .LVU316
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 993              		.loc 1 1167 16 is_stmt 0 view .LVU317
 994 0040 0120     		movs	r0, #1
 995              	.LVL56:
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 996              		.loc 1 1167 16 view .LVU318
 997 0042 04E0     		b	.L83
 998              	.LVL57:
 999              	.L81:
ARM GAS  /tmp/cc2z0qN7.s 			page 43


1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1000              		.loc 1 1177 5 is_stmt 1 view .LVU319
 1001              		.loc 1 1177 21 is_stmt 0 view .LVU320
 1002 0044 436A     		ldr	r3, [r0, #36]
 1003 0046 43F48023 		orr	r3, r3, #262144
 1004 004a 4362     		str	r3, [r0, #36]
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1005              		.loc 1 1179 5 is_stmt 1 view .LVU321
 1006              		.loc 1 1179 12 is_stmt 0 view .LVU322
 1007 004c 0120     		movs	r0, #1
 1008              	.LVL58:
 1009              	.L83:
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1010              		.loc 1 1181 1 view .LVU323
 1011 004e 02B0     		add	sp, sp, #8
 1012              	.LCFI10:
 1013              		.cfi_def_cfa_offset 0
 1014              		@ sp needed
 1015 0050 7047     		bx	lr
 1016              	.L88:
 1017 0052 00BF     		.align	2
 1018              	.L87:
 1019 0054 40420F00 		.word	1000000
 1020              		.cfi_endproc
 1021              	.LFE73:
 1023              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 1024              		.align	1
 1025              		.global	HAL_CAN_IsSleepActive
 1026              		.syntax unified
 1027              		.thumb
 1028              		.thumb_func
 1029              		.fpu softvfp
 1031              	HAL_CAN_IsSleepActive:
 1032              	.LVL59:
 1033              	.LFB74:
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check is sleep mode is active.
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Sleep mode is active.
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(const CAN_HandleTypeDef *hcan)
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1034              		.loc 1 1192 1 is_stmt 1 view -0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 0
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038              		@ link register save eliminated.
ARM GAS  /tmp/cc2z0qN7.s 			page 44


1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 1039              		.loc 1 1193 3 view .LVU325
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1040              		.loc 1 1194 3 view .LVU326
 1041              		.loc 1 1194 24 is_stmt 0 view .LVU327
 1042 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1043              	.LVL60:
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1044              		.loc 1 1196 3 is_stmt 1 view .LVU328
 1045              		.loc 1 1196 38 is_stmt 0 view .LVU329
 1046 0004 013B     		subs	r3, r3, #1
 1047              	.LVL61:
 1048              		.loc 1 1196 38 view .LVU330
 1049 0006 DBB2     		uxtb	r3, r3
 1050              		.loc 1 1196 6 view .LVU331
 1051 0008 012B     		cmp	r3, #1
 1052 000a 01D9     		bls	.L93
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1053              		.loc 1 1193 12 view .LVU332
 1054 000c 0020     		movs	r0, #0
 1055              	.LVL62:
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1056              		.loc 1 1193 12 view .LVU333
 1057 000e 7047     		bx	lr
 1058              	.LVL63:
 1059              	.L93:
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Sleep mode */
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 1060              		.loc 1 1200 5 is_stmt 1 view .LVU334
 1061              		.loc 1 1200 14 is_stmt 0 view .LVU335
 1062 0010 0368     		ldr	r3, [r0]
 1063              		.loc 1 1200 24 view .LVU336
 1064 0012 5868     		ldr	r0, [r3, #4]
 1065              	.LVL64:
 1066              		.loc 1 1200 8 view .LVU337
 1067 0014 10F00200 		ands	r0, r0, #2
 1068 0018 00D1     		bne	.L92
 1069 001a 7047     		bx	lr
 1070              	.L92:
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 1071              		.loc 1 1202 14 view .LVU338
 1072 001c 0120     		movs	r0, #1
 1073              	.LVL65:
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 1074              		.loc 1 1207 3 is_stmt 1 view .LVU339
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1075              		.loc 1 1208 1 is_stmt 0 view .LVU340
 1076 001e 7047     		bx	lr
 1077              		.cfi_endproc
ARM GAS  /tmp/cc2z0qN7.s 			page 45


 1078              	.LFE74:
 1080              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 1081              		.align	1
 1082              		.global	HAL_CAN_AddTxMessage
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1086              		.fpu softvfp
 1088              	HAL_CAN_AddTxMessage:
 1089              	.LVL66:
 1090              	.LFB75:
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         corresponding transmission request.
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                        const uint8_t aData[], uint32_t *pTxMailbox)
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1091              		.loc 1 1224 1 is_stmt 1 view -0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 1095              		@ link register save eliminated.
 1096              		.loc 1 1224 1 is_stmt 0 view .LVU342
 1097 0000 70B4     		push	{r4, r5, r6}
 1098              	.LCFI11:
 1099              		.cfi_def_cfa_offset 12
 1100              		.cfi_offset 4, -12
 1101              		.cfi_offset 5, -8
 1102              		.cfi_offset 6, -4
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 1103              		.loc 1 1225 3 is_stmt 1 view .LVU343
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1104              		.loc 1 1226 3 view .LVU344
 1105              		.loc 1 1226 24 is_stmt 0 view .LVU345
 1106 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1107              	.LVL67:
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 1108              		.loc 1 1227 3 is_stmt 1 view .LVU346
 1109              		.loc 1 1227 18 is_stmt 0 view .LVU347
 1110 0006 0568     		ldr	r5, [r0]
 1111              		.loc 1 1227 12 view .LVU348
 1112 0008 AD68     		ldr	r5, [r5, #8]
 1113              	.LVL68:
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 1114              		.loc 1 1230 3 is_stmt 1 view .LVU349
ARM GAS  /tmp/cc2z0qN7.s 			page 46


1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 1115              		.loc 1 1231 3 view .LVU350
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 1116              		.loc 1 1232 3 view .LVU351
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 1117              		.loc 1 1233 3 view .LVU352
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 1118              		.loc 1 1239 5 view .LVU353
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 1119              		.loc 1 1241 3 view .LVU354
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1120              		.loc 1 1243 3 view .LVU355
 1121              		.loc 1 1243 38 is_stmt 0 view .LVU356
 1122 000a 013C     		subs	r4, r4, #1
 1123              	.LVL69:
 1124              		.loc 1 1243 38 view .LVU357
 1125 000c E4B2     		uxtb	r4, r4
 1126              		.loc 1 1243 6 view .LVU358
 1127 000e 012C     		cmp	r4, #1
 1128 0010 5DD8     		bhi	.L95
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
 1129              		.loc 1 1247 5 is_stmt 1 view .LVU359
 1130              		.loc 1 1247 8 is_stmt 0 view .LVU360
 1131 0012 15F0E05F 		tst	r5, #469762048
 1132 0016 54D0     		beq	.L96
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Select an empty transmit mailbox */
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 1133              		.loc 1 1252 7 is_stmt 1 view .LVU361
 1134              		.loc 1 1252 23 is_stmt 0 view .LVU362
 1135 0018 C5F30164 		ubfx	r4, r5, #24, #2
 1136              	.LVL70:
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Store the Tx mailbox */
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
 1137              		.loc 1 1255 7 is_stmt 1 view .LVU363
 1138              		.loc 1 1255 33 is_stmt 0 view .LVU364
 1139 001c 0125     		movs	r5, #1
 1140              	.LVL71:
 1141              		.loc 1 1255 33 view .LVU365
 1142 001e A540     		lsls	r5, r5, r4
 1143              		.loc 1 1255 19 view .LVU366
 1144 0020 1D60     		str	r5, [r3]
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Id */
ARM GAS  /tmp/cc2z0qN7.s 			page 47


1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 1145              		.loc 1 1258 7 is_stmt 1 view .LVU367
 1146              		.loc 1 1258 18 is_stmt 0 view .LVU368
 1147 0022 8B68     		ldr	r3, [r1, #8]
 1148              	.LVL72:
 1149              		.loc 1 1258 10 view .LVU369
 1150 0024 002B     		cmp	r3, #0
 1151 0026 39D1     		bne	.L97
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 1152              		.loc 1 1260 9 is_stmt 1 view .LVU370
 1153              		.loc 1 1260 68 is_stmt 0 view .LVU371
 1154 0028 0E68     		ldr	r6, [r1]
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1155              		.loc 1 1261 67 view .LVU372
 1156 002a CB68     		ldr	r3, [r1, #12]
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1157              		.loc 1 1260 13 view .LVU373
 1158 002c 0568     		ldr	r5, [r0]
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1159              		.loc 1 1260 98 view .LVU374
 1160 002e 43EA4656 		orr	r6, r3, r6, lsl #21
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1161              		.loc 1 1260 57 view .LVU375
 1162 0032 04F11803 		add	r3, r4, #24
 1163 0036 1B01     		lsls	r3, r3, #4
 1164 0038 EE50     		str	r6, [r5, r3]
 1165              	.L98:
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the DLC */
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1166              		.loc 1 1271 7 is_stmt 1 view .LVU376
 1167              		.loc 1 1271 11 is_stmt 0 view .LVU377
 1168 003a 0368     		ldr	r3, [r0]
 1169              		.loc 1 1271 66 view .LVU378
 1170 003c 0D69     		ldr	r5, [r1, #16]
 1171              		.loc 1 1271 56 view .LVU379
 1172 003e 04F11806 		add	r6, r4, #24
 1173 0042 03EB0613 		add	r3, r3, r6, lsl #4
 1174 0046 5D60     		str	r5, [r3, #4]
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1175              		.loc 1 1274 7 is_stmt 1 view .LVU380
 1176              		.loc 1 1274 18 is_stmt 0 view .LVU381
 1177 0048 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1178              		.loc 1 1274 10 view .LVU382
 1179 004a 012B     		cmp	r3, #1
 1180 004c 31D0     		beq	.L102
 1181              	.LVL73:
ARM GAS  /tmp/cc2z0qN7.s 			page 48


 1182              	.L99:
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the data field */
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1183              		.loc 1 1280 7 is_stmt 1 view .LVU383
 1184 004e D179     		ldrb	r1, [r2, #7]	@ zero_extendqisi2
 1185 0050 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1186 0052 1B04     		lsls	r3, r3, #16
 1187 0054 43EA0163 		orr	r3, r3, r1, lsl #24
 1188 0058 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1189 005a 43EA0123 		orr	r3, r3, r1, lsl #8
 1190 005e 1579     		ldrb	r5, [r2, #4]	@ zero_extendqisi2
 1191 0060 0168     		ldr	r1, [r0]
 1192 0062 2B43     		orrs	r3, r3, r5
 1193 0064 01EB0411 		add	r1, r1, r4, lsl #4
 1194 0068 C1F88C31 		str	r3, [r1, #396]
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1195              		.loc 1 1285 7 view .LVU384
 1196 006c D178     		ldrb	r1, [r2, #3]	@ zero_extendqisi2
 1197 006e 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1198 0070 1B04     		lsls	r3, r3, #16
 1199 0072 43EA0163 		orr	r3, r3, r1, lsl #24
 1200 0076 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1201 0078 43EA0123 		orr	r3, r3, r1, lsl #8
 1202 007c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1203 007e 0268     		ldr	r2, [r0]
 1204              	.LVL74:
 1205              		.loc 1 1285 7 is_stmt 0 view .LVU385
 1206 0080 0B43     		orrs	r3, r3, r1
 1207 0082 02EB0412 		add	r2, r2, r4, lsl #4
 1208 0086 C2F88831 		str	r3, [r2, #392]
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Request transmission */
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1209              		.loc 1 1292 7 is_stmt 1 view .LVU386
 1210 008a 0268     		ldr	r2, [r0]
 1211 008c 1834     		adds	r4, r4, #24
 1212              	.LVL75:
 1213              		.loc 1 1292 7 is_stmt 0 view .LVU387
 1214 008e 2401     		lsls	r4, r4, #4
 1215 0090 1359     		ldr	r3, [r2, r4]
 1216 0092 43F00103 		orr	r3, r3, #1
 1217 0096 1351     		str	r3, [r2, r4]
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Return function status */
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_OK;
ARM GAS  /tmp/cc2z0qN7.s 			page 49


 1218              		.loc 1 1295 7 is_stmt 1 view .LVU388
 1219              		.loc 1 1295 14 is_stmt 0 view .LVU389
 1220 0098 0020     		movs	r0, #0
 1221              	.LVL76:
 1222              		.loc 1 1295 14 view .LVU390
 1223 009a 1DE0     		b	.L100
 1224              	.LVL77:
 1225              	.L97:
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1226              		.loc 1 1265 9 is_stmt 1 view .LVU391
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1227              		.loc 1 1265 68 is_stmt 0 view .LVU392
 1228 009c 4D68     		ldr	r5, [r1, #4]
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1229              		.loc 1 1265 98 view .LVU393
 1230 009e 43EAC503 		orr	r3, r3, r5, lsl #3
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1231              		.loc 1 1267 67 view .LVU394
 1232 00a2 CD68     		ldr	r5, [r1, #12]
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1233              		.loc 1 1265 13 view .LVU395
 1234 00a4 0668     		ldr	r6, [r0]
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1235              		.loc 1 1266 73 view .LVU396
 1236 00a6 2B43     		orrs	r3, r3, r5
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1237              		.loc 1 1265 57 view .LVU397
 1238 00a8 04F11805 		add	r5, r4, #24
 1239 00ac 2D01     		lsls	r5, r5, #4
 1240 00ae 7351     		str	r3, [r6, r5]
 1241 00b0 C3E7     		b	.L98
 1242              	.L102:
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1243              		.loc 1 1276 9 is_stmt 1 view .LVU398
 1244 00b2 0368     		ldr	r3, [r0]
 1245 00b4 03EB0613 		add	r3, r3, r6, lsl #4
 1246 00b8 5968     		ldr	r1, [r3, #4]
 1247              	.LVL78:
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1248              		.loc 1 1276 9 is_stmt 0 view .LVU399
 1249 00ba 41F48071 		orr	r1, r1, #256
 1250 00be 5960     		str	r1, [r3, #4]
 1251 00c0 C5E7     		b	.L99
 1252              	.LVL79:
 1253              	.L96:
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1254              		.loc 1 1300 7 is_stmt 1 view .LVU400
 1255              		.loc 1 1300 23 is_stmt 0 view .LVU401
 1256 00c2 436A     		ldr	r3, [r0, #36]
 1257              	.LVL80:
 1258              		.loc 1 1300 23 view .LVU402
 1259 00c4 43F40013 		orr	r3, r3, #2097152
 1260 00c8 4362     		str	r3, [r0, #36]
ARM GAS  /tmp/cc2z0qN7.s 			page 50


1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 1261              		.loc 1 1302 7 is_stmt 1 view .LVU403
 1262              		.loc 1 1302 14 is_stmt 0 view .LVU404
 1263 00ca 0120     		movs	r0, #1
 1264              	.LVL81:
 1265              		.loc 1 1302 14 view .LVU405
 1266 00cc 04E0     		b	.L100
 1267              	.LVL82:
 1268              	.L95:
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1269              		.loc 1 1308 5 is_stmt 1 view .LVU406
 1270              		.loc 1 1308 21 is_stmt 0 view .LVU407
 1271 00ce 436A     		ldr	r3, [r0, #36]
 1272              	.LVL83:
 1273              		.loc 1 1308 21 view .LVU408
 1274 00d0 43F48023 		orr	r3, r3, #262144
 1275 00d4 4362     		str	r3, [r0, #36]
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1276              		.loc 1 1310 5 is_stmt 1 view .LVU409
 1277              		.loc 1 1310 12 is_stmt 0 view .LVU410
 1278 00d6 0120     		movs	r0, #1
 1279              	.LVL84:
 1280              	.L100:
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1281              		.loc 1 1312 1 view .LVU411
 1282 00d8 70BC     		pop	{r4, r5, r6}
 1283              	.LCFI12:
 1284              		.cfi_restore 6
 1285              		.cfi_restore 5
 1286              		.cfi_restore 4
 1287              		.cfi_def_cfa_offset 0
 1288 00da 7047     		bx	lr
 1289              		.cfi_endproc
 1290              	.LFE75:
 1292              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1293              		.align	1
 1294              		.global	HAL_CAN_AbortTxRequest
 1295              		.syntax unified
 1296              		.thumb
 1297              		.thumb_func
 1298              		.fpu softvfp
 1300              	HAL_CAN_AbortTxRequest:
 1301              	.LVL85:
 1302              	.LFB76:
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Abort transmission requests
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  /tmp/cc2z0qN7.s 			page 51


1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1303              		.loc 1 1323 1 is_stmt 1 view -0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 1307              		@ link register save eliminated.
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1308              		.loc 1 1324 3 view .LVU413
 1309              		.loc 1 1324 24 is_stmt 0 view .LVU414
 1310 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1311              	.LVL86:
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 1312              		.loc 1 1327 3 is_stmt 1 view .LVU415
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1313              		.loc 1 1329 3 view .LVU416
 1314              		.loc 1 1329 38 is_stmt 0 view .LVU417
 1315 0004 013B     		subs	r3, r3, #1
 1316              	.LVL87:
 1317              		.loc 1 1329 38 view .LVU418
 1318 0006 DBB2     		uxtb	r3, r3
 1319              		.loc 1 1329 6 view .LVU419
 1320 0008 012B     		cmp	r3, #1
 1321 000a 05D9     		bls	.L109
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 */
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 */
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
ARM GAS  /tmp/cc2z0qN7.s 			page 52


1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1322              		.loc 1 1359 5 is_stmt 1 view .LVU420
 1323              		.loc 1 1359 21 is_stmt 0 view .LVU421
 1324 000c 436A     		ldr	r3, [r0, #36]
 1325 000e 43F48023 		orr	r3, r3, #262144
 1326 0012 4362     		str	r3, [r0, #36]
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1327              		.loc 1 1361 5 is_stmt 1 view .LVU422
 1328              		.loc 1 1361 12 is_stmt 0 view .LVU423
 1329 0014 0120     		movs	r0, #1
 1330              	.LVL88:
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1331              		.loc 1 1363 1 view .LVU424
 1332 0016 7047     		bx	lr
 1333              	.LVL89:
 1334              	.L109:
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1335              		.loc 1 1333 5 is_stmt 1 view .LVU425
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1336              		.loc 1 1333 8 is_stmt 0 view .LVU426
 1337 0018 11F0010F 		tst	r1, #1
 1338 001c 04D0     		beq	.L105
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1339              		.loc 1 1336 7 is_stmt 1 view .LVU427
 1340 001e 0268     		ldr	r2, [r0]
 1341 0020 9368     		ldr	r3, [r2, #8]
 1342 0022 43F08003 		orr	r3, r3, #128
 1343 0026 9360     		str	r3, [r2, #8]
 1344              	.L105:
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1345              		.loc 1 1340 5 view .LVU428
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1346              		.loc 1 1340 8 is_stmt 0 view .LVU429
 1347 0028 11F0020F 		tst	r1, #2
 1348 002c 04D0     		beq	.L106
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1349              		.loc 1 1343 7 is_stmt 1 view .LVU430
 1350 002e 0268     		ldr	r2, [r0]
 1351 0030 9368     		ldr	r3, [r2, #8]
 1352 0032 43F40043 		orr	r3, r3, #32768
 1353 0036 9360     		str	r3, [r2, #8]
 1354              	.L106:
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1355              		.loc 1 1347 5 view .LVU431
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1356              		.loc 1 1347 8 is_stmt 0 view .LVU432
 1357 0038 11F0040F 		tst	r1, #4
 1358 003c 04D0     		beq	.L107
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1359              		.loc 1 1350 7 is_stmt 1 view .LVU433
 1360 003e 0268     		ldr	r2, [r0]
 1361 0040 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/cc2z0qN7.s 			page 53


 1362 0042 43F40003 		orr	r3, r3, #8388608
 1363 0046 9360     		str	r3, [r2, #8]
 1364              	.L107:
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1365              		.loc 1 1354 5 view .LVU434
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1366              		.loc 1 1354 12 is_stmt 0 view .LVU435
 1367 0048 0020     		movs	r0, #0
 1368              	.LVL90:
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1369              		.loc 1 1354 12 view .LVU436
 1370 004a 7047     		bx	lr
 1371              		.cfi_endproc
 1372              	.LFE76:
 1374              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1375              		.align	1
 1376              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1377              		.syntax unified
 1378              		.thumb
 1379              		.thumb_func
 1380              		.fpu softvfp
 1382              	HAL_CAN_GetTxMailboxesFreeLevel:
 1383              	.LVL91:
 1384              	.LFB77:
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1385              		.loc 1 1372 1 is_stmt 1 view -0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 1389              		@ link register save eliminated.
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t freelevel = 0U;
 1390              		.loc 1 1373 3 view .LVU438
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1391              		.loc 1 1374 3 view .LVU439
 1392              		.loc 1 1374 24 is_stmt 0 view .LVU440
 1393 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1394              	.LVL92:
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1395              		.loc 1 1376 3 is_stmt 1 view .LVU441
 1396              		.loc 1 1376 38 is_stmt 0 view .LVU442
 1397 0004 013B     		subs	r3, r3, #1
 1398              	.LVL93:
 1399              		.loc 1 1376 38 view .LVU443
 1400 0006 DBB2     		uxtb	r3, r3
 1401              		.loc 1 1376 6 view .LVU444
 1402 0008 012B     		cmp	r3, #1
 1403 000a 01D9     		bls	.L116
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
ARM GAS  /tmp/cc2z0qN7.s 			page 54


 1404              		.loc 1 1373 12 view .LVU445
 1405 000c 0020     		movs	r0, #0
 1406              	.LVL94:
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return freelevel;
 1407              		.loc 1 1399 3 is_stmt 1 view .LVU446
 1408              	.L110:
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1409              		.loc 1 1400 1 is_stmt 0 view .LVU447
 1410 000e 7047     		bx	lr
 1411              	.LVL95:
 1412              	.L116:
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1413              		.loc 1 1380 5 is_stmt 1 view .LVU448
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1414              		.loc 1 1380 14 is_stmt 0 view .LVU449
 1415 0010 0368     		ldr	r3, [r0]
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1416              		.loc 1 1380 24 view .LVU450
 1417 0012 9868     		ldr	r0, [r3, #8]
 1418              	.LVL96:
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1419              		.loc 1 1380 8 view .LVU451
 1420 0014 10F08060 		ands	r0, r0, #67108864
 1421 0018 00D0     		beq	.L112
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1422              		.loc 1 1382 16 view .LVU452
 1423 001a 0120     		movs	r0, #1
 1424              	.L112:
 1425              	.LVL97:
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1426              		.loc 1 1386 5 is_stmt 1 view .LVU453
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1427              		.loc 1 1386 24 is_stmt 0 view .LVU454
 1428 001c 9A68     		ldr	r2, [r3, #8]
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/cc2z0qN7.s 			page 55


 1429              		.loc 1 1386 8 view .LVU455
 1430 001e 12F0006F 		tst	r2, #134217728
 1431 0022 00D0     		beq	.L113
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1432              		.loc 1 1388 7 is_stmt 1 view .LVU456
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1433              		.loc 1 1388 16 is_stmt 0 view .LVU457
 1434 0024 0130     		adds	r0, r0, #1
 1435              	.LVL98:
 1436              	.L113:
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1437              		.loc 1 1392 5 is_stmt 1 view .LVU458
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1438              		.loc 1 1392 24 is_stmt 0 view .LVU459
 1439 0026 9B68     		ldr	r3, [r3, #8]
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1440              		.loc 1 1392 8 view .LVU460
 1441 0028 13F0805F 		tst	r3, #268435456
 1442 002c EFD0     		beq	.L110
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1443              		.loc 1 1394 7 is_stmt 1 view .LVU461
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1444              		.loc 1 1394 16 is_stmt 0 view .LVU462
 1445 002e 0130     		adds	r0, r0, #1
 1446              	.LVL99:
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1447              		.loc 1 1394 16 view .LVU463
 1448 0030 7047     		bx	lr
 1449              		.cfi_endproc
 1450              	.LFE77:
 1452              		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1453              		.align	1
 1454              		.global	HAL_CAN_IsTxMessagePending
 1455              		.syntax unified
 1456              		.thumb
 1457              		.thumb_func
 1458              		.fpu softvfp
 1460              	HAL_CAN_IsTxMessagePending:
 1461              	.LVL100:
 1462              	.LFB78:
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         Mailboxes.
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *                Tx Mailbox.
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1463              		.loc 1 1415 1 is_stmt 1 view -0
 1464              		.cfi_startproc
ARM GAS  /tmp/cc2z0qN7.s 			page 56


 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467              		@ link register save eliminated.
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 1468              		.loc 1 1416 3 view .LVU465
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1469              		.loc 1 1417 3 view .LVU466
 1470              		.loc 1 1417 24 is_stmt 0 view .LVU467
 1471 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1472              	.LVL101:
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 1473              		.loc 1 1420 3 is_stmt 1 view .LVU468
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1474              		.loc 1 1422 3 view .LVU469
 1475              		.loc 1 1422 38 is_stmt 0 view .LVU470
 1476 0004 013B     		subs	r3, r3, #1
 1477              	.LVL102:
 1478              		.loc 1 1422 38 view .LVU471
 1479 0006 DBB2     		uxtb	r3, r3
 1480              		.loc 1 1422 6 view .LVU472
 1481 0008 012B     		cmp	r3, #1
 1482 000a 01D9     		bls	.L121
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1483              		.loc 1 1416 12 view .LVU473
 1484 000c 0020     		movs	r0, #0
 1485              	.LVL103:
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1486              		.loc 1 1416 12 view .LVU474
 1487 000e 7047     		bx	lr
 1488              	.LVL104:
 1489              	.L121:
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1490              		.loc 1 1426 5 is_stmt 1 view .LVU475
 1491              		.loc 1 1426 14 is_stmt 0 view .LVU476
 1492 0010 0368     		ldr	r3, [r0]
 1493              		.loc 1 1426 24 view .LVU477
 1494 0012 9B68     		ldr	r3, [r3, #8]
 1495              		.loc 1 1426 30 view .LVU478
 1496 0014 03EA8163 		and	r3, r3, r1, lsl #26
 1497              		.loc 1 1426 8 view .LVU479
 1498 0018 B3EB816F 		cmp	r3, r1, lsl #26
 1499 001c 01D0     		beq	.L122
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 1500              		.loc 1 1428 14 view .LVU480
 1501 001e 0120     		movs	r0, #1
 1502              	.LVL105:
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return status */
ARM GAS  /tmp/cc2z0qN7.s 			page 57


1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 1503              		.loc 1 1433 3 is_stmt 1 view .LVU481
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1504              		.loc 1 1434 1 is_stmt 0 view .LVU482
 1505 0020 7047     		bx	lr
 1506              	.LVL106:
 1507              	.L122:
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1508              		.loc 1 1416 12 view .LVU483
 1509 0022 0020     		movs	r0, #0
 1510              	.LVL107:
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1511              		.loc 1 1416 12 view .LVU484
 1512 0024 7047     		bx	lr
 1513              		.cfi_endproc
 1514              	.LFE78:
 1516              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1517              		.align	1
 1518              		.global	HAL_CAN_GetTxTimestamp
 1519              		.syntax unified
 1520              		.thumb
 1521              		.thumb_func
 1522              		.fpu softvfp
 1524              	HAL_CAN_GetTxTimestamp:
 1525              	.LVL108:
 1526              	.LFB79:
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             mode is enabled.
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         read.
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(const CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1527              		.loc 1 1447 1 is_stmt 1 view -0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531              		@ link register save eliminated.
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timestamp = 0U;
 1532              		.loc 1 1448 3 view .LVU486
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 1533              		.loc 1 1449 3 view .LVU487
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1534              		.loc 1 1450 3 view .LVU488
 1535              		.loc 1 1450 24 is_stmt 0 view .LVU489
 1536 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1537              	.LVL109:
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
 1538              		.loc 1 1453 3 is_stmt 1 view .LVU490
ARM GAS  /tmp/cc2z0qN7.s 			page 58


1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1539              		.loc 1 1455 3 view .LVU491
 1540              		.loc 1 1455 38 is_stmt 0 view .LVU492
 1541 0004 013B     		subs	r3, r3, #1
 1542              	.LVL110:
 1543              		.loc 1 1455 38 view .LVU493
 1544 0006 DBB2     		uxtb	r3, r3
 1545              		.loc 1 1455 6 view .LVU494
 1546 0008 012B     		cmp	r3, #1
 1547 000a 01D9     		bls	.L126
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 1548              		.loc 1 1448 12 view .LVU495
 1549 000c 0020     		movs	r0, #0
 1550              	.LVL111:
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the Tx mailbox */
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get timestamp */
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the timestamp */
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return timestamp;
 1551              		.loc 1 1466 3 is_stmt 1 view .LVU496
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1552              		.loc 1 1467 1 is_stmt 0 view .LVU497
 1553 000e 7047     		bx	lr
 1554              	.LVL112:
 1555              	.L126:
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1556              		.loc 1 1459 5 is_stmt 1 view .LVU498
 1557              	.LBB4:
 1558              	.LBI4:
 1559              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  /tmp/cc2z0qN7.s 			page 59


  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc2z0qN7.s 			page 60


  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc2z0qN7.s 			page 61


 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
ARM GAS  /tmp/cc2z0qN7.s 			page 62


 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc2z0qN7.s 			page 63


 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
ARM GAS  /tmp/cc2z0qN7.s 			page 64


 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc2z0qN7.s 			page 65


 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc2z0qN7.s 			page 66


 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
ARM GAS  /tmp/cc2z0qN7.s 			page 67


 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc2z0qN7.s 			page 68


 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
ARM GAS  /tmp/cc2z0qN7.s 			page 69


 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc2z0qN7.s 			page 70


 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
ARM GAS  /tmp/cc2z0qN7.s 			page 71


 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc2z0qN7.s 			page 72


 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc2z0qN7.s 			page 73


 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
ARM GAS  /tmp/cc2z0qN7.s 			page 74


 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/cc2z0qN7.s 			page 75


 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 1560              		.loc 2 981 31 view .LVU499
 1561              	.LBB5:
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 1562              		.loc 2 983 3 view .LVU500
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /tmp/cc2z0qN7.s 			page 76


 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1563              		.loc 2 988 4 view .LVU501
 1564              		.syntax unified
 1565              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1566 0010 91FAA1F1 		rbit r1, r1
 1567              	@ 0 "" 2
 1568              	.LVL113:
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 1569              		.loc 2 1001 3 view .LVU502
 1570              		.loc 2 1001 3 is_stmt 0 view .LVU503
 1571              		.thumb
 1572              		.syntax unified
 1573              	.LBE5:
 1574              	.LBE4:
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1575              		.loc 1 1459 21 view .LVU504
 1576 0014 B1FA81F1 		clz	r1, r1
 1577              	.LVL114:
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1578              		.loc 1 1462 5 is_stmt 1 view .LVU505
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1579              		.loc 1 1462 22 is_stmt 0 view .LVU506
 1580 0018 0368     		ldr	r3, [r0]
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1581              		.loc 1 1462 61 view .LVU507
 1582 001a 1831     		adds	r1, r1, #24
 1583              	.LVL115:
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1584              		.loc 1 1462 61 view .LVU508
 1585 001c 03EB0111 		add	r1, r3, r1, lsl #4
 1586              	.LVL116:
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1587              		.loc 1 1462 61 view .LVU509
 1588 0020 4868     		ldr	r0, [r1, #4]
 1589              	.LVL117:
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1590              		.loc 1 1462 85 view .LVU510
 1591 0022 000C     		lsrs	r0, r0, #16
 1592              	.LVL118:
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1593              		.loc 1 1462 85 view .LVU511
 1594 0024 7047     		bx	lr
 1595              		.cfi_endproc
 1596              	.LFE79:
ARM GAS  /tmp/cc2z0qN7.s 			page 77


 1598              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1599              		.align	1
 1600              		.global	HAL_CAN_GetRxMessage
 1601              		.syntax unified
 1602              		.thumb
 1603              		.thumb_func
 1604              		.fpu softvfp
 1606              	HAL_CAN_GetRxMessage:
 1607              	.LVL119:
 1608              	.LFB80:
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of the Rx frame will be stored.
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                        CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1609              		.loc 1 1482 1 is_stmt 1 view -0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
 1612              		@ frame_needed = 0, uses_anonymous_args = 0
 1613              		@ link register save eliminated.
 1614              		.loc 1 1482 1 is_stmt 0 view .LVU513
 1615 0000 70B4     		push	{r4, r5, r6}
 1616              	.LCFI13:
 1617              		.cfi_def_cfa_offset 12
 1618              		.cfi_offset 4, -12
 1619              		.cfi_offset 5, -8
 1620              		.cfi_offset 6, -4
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1621              		.loc 1 1483 3 is_stmt 1 view .LVU514
 1622              		.loc 1 1483 24 is_stmt 0 view .LVU515
 1623 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1624              	.LVL120:
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
 1625              		.loc 1 1485 3 is_stmt 1 view .LVU516
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1626              		.loc 1 1487 3 view .LVU517
 1627              		.loc 1 1487 38 is_stmt 0 view .LVU518
 1628 0006 013C     		subs	r4, r4, #1
 1629              	.LVL121:
 1630              		.loc 1 1487 38 view .LVU519
 1631 0008 E4B2     		uxtb	r4, r4
 1632              		.loc 1 1487 6 view .LVU520
 1633 000a 012C     		cmp	r4, #1
 1634 000c 00F2A080 		bhi	.L128
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
ARM GAS  /tmp/cc2z0qN7.s 			page 78


1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the Rx FIFO */
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1635              		.loc 1 1491 5 is_stmt 1 view .LVU521
 1636              		.loc 1 1491 8 is_stmt 0 view .LVU522
 1637 0010 51B9     		cbnz	r1, .L129
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 1638              		.loc 1 1494 7 is_stmt 1 view .LVU523
 1639              		.loc 1 1494 16 is_stmt 0 view .LVU524
 1640 0012 0468     		ldr	r4, [r0]
 1641              		.loc 1 1494 26 view .LVU525
 1642 0014 E468     		ldr	r4, [r4, #12]
 1643              		.loc 1 1494 10 view .LVU526
 1644 0016 14F0030F 		tst	r4, #3
 1645 001a 10D1     		bne	.L130
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1646              		.loc 1 1497 9 is_stmt 1 view .LVU527
 1647              		.loc 1 1497 25 is_stmt 0 view .LVU528
 1648 001c 436A     		ldr	r3, [r0, #36]
 1649              	.LVL122:
 1650              		.loc 1 1497 25 view .LVU529
 1651 001e 43F40013 		orr	r3, r3, #2097152
 1652 0022 4362     		str	r3, [r0, #36]
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 1653              		.loc 1 1499 9 is_stmt 1 view .LVU530
 1654              		.loc 1 1499 16 is_stmt 0 view .LVU531
 1655 0024 0120     		movs	r0, #1
 1656              	.LVL123:
 1657              		.loc 1 1499 16 view .LVU532
 1658 0026 98E0     		b	.L131
 1659              	.LVL124:
 1660              	.L129:
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 1661              		.loc 1 1505 7 is_stmt 1 view .LVU533
 1662              		.loc 1 1505 16 is_stmt 0 view .LVU534
 1663 0028 0468     		ldr	r4, [r0]
 1664              		.loc 1 1505 26 view .LVU535
 1665 002a 2469     		ldr	r4, [r4, #16]
 1666              		.loc 1 1505 10 view .LVU536
 1667 002c 14F0030F 		tst	r4, #3
 1668 0030 05D1     		bne	.L130
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1669              		.loc 1 1508 9 is_stmt 1 view .LVU537
 1670              		.loc 1 1508 25 is_stmt 0 view .LVU538
 1671 0032 436A     		ldr	r3, [r0, #36]
ARM GAS  /tmp/cc2z0qN7.s 			page 79


 1672              	.LVL125:
 1673              		.loc 1 1508 25 view .LVU539
 1674 0034 43F40013 		orr	r3, r3, #2097152
 1675 0038 4362     		str	r3, [r0, #36]
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 1676              		.loc 1 1510 9 is_stmt 1 view .LVU540
 1677              		.loc 1 1510 16 is_stmt 0 view .LVU541
 1678 003a 0120     		movs	r0, #1
 1679              	.LVL126:
 1680              		.loc 1 1510 16 view .LVU542
 1681 003c 8DE0     		b	.L131
 1682              	.LVL127:
 1683              	.L130:
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the header */
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1684              		.loc 1 1515 5 is_stmt 1 view .LVU543
 1685              		.loc 1 1515 39 is_stmt 0 view .LVU544
 1686 003e 0568     		ldr	r5, [r0]
 1687              		.loc 1 1515 71 view .LVU545
 1688 0040 01F11B04 		add	r4, r1, #27
 1689 0044 2401     		lsls	r4, r4, #4
 1690 0046 2C59     		ldr	r4, [r5, r4]
 1691              		.loc 1 1515 33 view .LVU546
 1692 0048 04F00404 		and	r4, r4, #4
 1693              		.loc 1 1515 18 view .LVU547
 1694 004c 9460     		str	r4, [r2, #8]
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1695              		.loc 1 1516 5 is_stmt 1 view .LVU548
 1696              		.loc 1 1516 8 is_stmt 0 view .LVU549
 1697 004e 002C     		cmp	r4, #0
 1698 0050 67D1     		bne	.L132
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1699              		.loc 1 1518 7 is_stmt 1 view .LVU550
 1700              		.loc 1 1518 45 is_stmt 0 view .LVU551
 1701 0052 0568     		ldr	r5, [r0]
 1702              		.loc 1 1518 77 view .LVU552
 1703 0054 01F11B04 		add	r4, r1, #27
 1704 0058 2401     		lsls	r4, r4, #4
 1705 005a 2C59     		ldr	r4, [r5, r4]
 1706              		.loc 1 1518 83 view .LVU553
 1707 005c 640D     		lsrs	r4, r4, #21
 1708              		.loc 1 1518 22 view .LVU554
 1709 005e 1460     		str	r4, [r2]
 1710              	.L133:
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                         hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 1711              		.loc 1 1525 5 is_stmt 1 view .LVU555
ARM GAS  /tmp/cc2z0qN7.s 			page 80


 1712              		.loc 1 1525 40 is_stmt 0 view .LVU556
 1713 0060 0568     		ldr	r5, [r0]
 1714              		.loc 1 1525 72 view .LVU557
 1715 0062 01F11B04 		add	r4, r1, #27
 1716 0066 2401     		lsls	r4, r4, #4
 1717 0068 2D59     		ldr	r5, [r5, r4]
 1718              		.loc 1 1525 34 view .LVU558
 1719 006a 05F00205 		and	r5, r5, #2
 1720              		.loc 1 1525 18 view .LVU559
 1721 006e D560     		str	r5, [r2, #12]
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 1722              		.loc 1 1526 5 is_stmt 1 view .LVU560
 1723              		.loc 1 1526 31 is_stmt 0 view .LVU561
 1724 0070 0568     		ldr	r5, [r0]
 1725              		.loc 1 1526 63 view .LVU562
 1726 0072 2C44     		add	r4, r4, r5
 1727 0074 6468     		ldr	r4, [r4, #4]
 1728              		.loc 1 1526 8 view .LVU563
 1729 0076 14F0080F 		tst	r4, #8
 1730 007a 5AD0     		beq	.L134
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Truncate DLC to 8 if received field is over range */
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->DLC = 8U;
 1731              		.loc 1 1529 7 is_stmt 1 view .LVU564
 1732              		.loc 1 1529 20 is_stmt 0 view .LVU565
 1733 007c 0824     		movs	r4, #8
 1734 007e 1461     		str	r4, [r2, #16]
 1735              	.L135:
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_P
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1736              		.loc 1 1535 5 is_stmt 1 view .LVU566
 1737              		.loc 1 1535 54 is_stmt 0 view .LVU567
 1738 0080 0568     		ldr	r5, [r0]
 1739              		.loc 1 1535 86 view .LVU568
 1740 0082 01F11B06 		add	r6, r1, #27
 1741 0086 05EB0615 		add	r5, r5, r6, lsl #4
 1742 008a 6D68     		ldr	r5, [r5, #4]
 1743              		.loc 1 1535 93 view .LVU569
 1744 008c C5F30725 		ubfx	r5, r5, #8, #8
 1745              		.loc 1 1535 31 view .LVU570
 1746 0090 9561     		str	r5, [r2, #24]
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1747              		.loc 1 1536 5 is_stmt 1 view .LVU571
 1748              		.loc 1 1536 48 is_stmt 0 view .LVU572
 1749 0092 0468     		ldr	r4, [r0]
 1750              		.loc 1 1536 80 view .LVU573
 1751 0094 04EB0614 		add	r4, r4, r6, lsl #4
 1752 0098 6468     		ldr	r4, [r4, #4]
 1753              		.loc 1 1536 87 view .LVU574
 1754 009a 240C     		lsrs	r4, r4, #16
 1755              		.loc 1 1536 24 view .LVU575
 1756 009c 5461     		str	r4, [r2, #20]
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc2z0qN7.s 			page 81


1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the data */
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1757              		.loc 1 1539 5 is_stmt 1 view .LVU576
 1758              		.loc 1 1539 49 is_stmt 0 view .LVU577
 1759 009e 0268     		ldr	r2, [r0]
 1760              	.LVL128:
 1761              		.loc 1 1539 81 view .LVU578
 1762 00a0 02EB0112 		add	r2, r2, r1, lsl #4
 1763 00a4 D2F8B821 		ldr	r2, [r2, #440]
 1764              		.loc 1 1539 14 view .LVU579
 1765 00a8 1A70     		strb	r2, [r3]
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1766              		.loc 1 1540 5 is_stmt 1 view .LVU580
 1767              		.loc 1 1540 49 is_stmt 0 view .LVU581
 1768 00aa 0268     		ldr	r2, [r0]
 1769              		.loc 1 1540 81 view .LVU582
 1770 00ac 02EB0112 		add	r2, r2, r1, lsl #4
 1771 00b0 D2F8B821 		ldr	r2, [r2, #440]
 1772              		.loc 1 1540 16 view .LVU583
 1773 00b4 C2F30722 		ubfx	r2, r2, #8, #8
 1774              		.loc 1 1540 14 view .LVU584
 1775 00b8 5A70     		strb	r2, [r3, #1]
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1776              		.loc 1 1541 5 is_stmt 1 view .LVU585
 1777              		.loc 1 1541 49 is_stmt 0 view .LVU586
 1778 00ba 0268     		ldr	r2, [r0]
 1779              		.loc 1 1541 81 view .LVU587
 1780 00bc 02EB0112 		add	r2, r2, r1, lsl #4
 1781 00c0 D2F8B821 		ldr	r2, [r2, #440]
 1782              		.loc 1 1541 16 view .LVU588
 1783 00c4 C2F30742 		ubfx	r2, r2, #16, #8
 1784              		.loc 1 1541 14 view .LVU589
 1785 00c8 9A70     		strb	r2, [r3, #2]
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1786              		.loc 1 1542 5 is_stmt 1 view .LVU590
 1787              		.loc 1 1542 49 is_stmt 0 view .LVU591
 1788 00ca 0268     		ldr	r2, [r0]
 1789              		.loc 1 1542 81 view .LVU592
 1790 00cc 02EB0112 		add	r2, r2, r1, lsl #4
 1791 00d0 D2F8B821 		ldr	r2, [r2, #440]
 1792              		.loc 1 1542 16 view .LVU593
 1793 00d4 120E     		lsrs	r2, r2, #24
 1794              		.loc 1 1542 14 view .LVU594
 1795 00d6 DA70     		strb	r2, [r3, #3]
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1796              		.loc 1 1543 5 is_stmt 1 view .LVU595
 1797              		.loc 1 1543 49 is_stmt 0 view .LVU596
 1798 00d8 0268     		ldr	r2, [r0]
 1799              		.loc 1 1543 81 view .LVU597
 1800 00da 02EB0112 		add	r2, r2, r1, lsl #4
 1801 00de D2F8BC21 		ldr	r2, [r2, #444]
 1802              		.loc 1 1543 14 view .LVU598
 1803 00e2 1A71     		strb	r2, [r3, #4]
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1804              		.loc 1 1544 5 is_stmt 1 view .LVU599
 1805              		.loc 1 1544 49 is_stmt 0 view .LVU600
 1806 00e4 0268     		ldr	r2, [r0]
ARM GAS  /tmp/cc2z0qN7.s 			page 82


 1807              		.loc 1 1544 81 view .LVU601
 1808 00e6 02EB0112 		add	r2, r2, r1, lsl #4
 1809 00ea D2F8BC21 		ldr	r2, [r2, #444]
 1810              		.loc 1 1544 16 view .LVU602
 1811 00ee C2F30722 		ubfx	r2, r2, #8, #8
 1812              		.loc 1 1544 14 view .LVU603
 1813 00f2 5A71     		strb	r2, [r3, #5]
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1814              		.loc 1 1545 5 is_stmt 1 view .LVU604
 1815              		.loc 1 1545 49 is_stmt 0 view .LVU605
 1816 00f4 0268     		ldr	r2, [r0]
 1817              		.loc 1 1545 81 view .LVU606
 1818 00f6 02EB0112 		add	r2, r2, r1, lsl #4
 1819 00fa D2F8BC21 		ldr	r2, [r2, #444]
 1820              		.loc 1 1545 16 view .LVU607
 1821 00fe C2F30742 		ubfx	r2, r2, #16, #8
 1822              		.loc 1 1545 14 view .LVU608
 1823 0102 9A71     		strb	r2, [r3, #6]
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1824              		.loc 1 1546 5 is_stmt 1 view .LVU609
 1825              		.loc 1 1546 49 is_stmt 0 view .LVU610
 1826 0104 0268     		ldr	r2, [r0]
 1827              		.loc 1 1546 81 view .LVU611
 1828 0106 02EB0112 		add	r2, r2, r1, lsl #4
 1829 010a D2F8BC21 		ldr	r2, [r2, #444]
 1830              		.loc 1 1546 16 view .LVU612
 1831 010e 120E     		lsrs	r2, r2, #24
 1832              		.loc 1 1546 14 view .LVU613
 1833 0110 DA71     		strb	r2, [r3, #7]
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Release the FIFO */
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1834              		.loc 1 1549 5 is_stmt 1 view .LVU614
 1835              		.loc 1 1549 8 is_stmt 0 view .LVU615
 1836 0112 B9B9     		cbnz	r1, .L136
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 0 */
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 1837              		.loc 1 1552 7 is_stmt 1 view .LVU616
 1838 0114 0268     		ldr	r2, [r0]
 1839 0116 D368     		ldr	r3, [r2, #12]
 1840              	.LVL129:
 1841              		.loc 1 1552 7 is_stmt 0 view .LVU617
 1842 0118 43F02003 		orr	r3, r3, #32
 1843 011c D360     		str	r3, [r2, #12]
 1844              	.L137:
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 1 */
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 1845              		.loc 1 1561 5 is_stmt 1 view .LVU618
 1846              		.loc 1 1561 12 is_stmt 0 view .LVU619
ARM GAS  /tmp/cc2z0qN7.s 			page 83


 1847 011e 0020     		movs	r0, #0
 1848              	.LVL130:
 1849              		.loc 1 1561 12 view .LVU620
 1850 0120 1BE0     		b	.L131
 1851              	.LVL131:
 1852              	.L132:
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                         hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 1853              		.loc 1 1522 7 is_stmt 1 view .LVU621
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1854              		.loc 1 1523 29 is_stmt 0 view .LVU622
 1855 0122 0568     		ldr	r5, [r0]
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1856              		.loc 1 1523 61 view .LVU623
 1857 0124 01F11B04 		add	r4, r1, #27
 1858 0128 2401     		lsls	r4, r4, #4
 1859 012a 2C59     		ldr	r4, [r5, r4]
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1860              		.loc 1 1523 67 view .LVU624
 1861 012c E408     		lsrs	r4, r4, #3
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                         hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 1862              		.loc 1 1522 22 view .LVU625
 1863 012e 5460     		str	r4, [r2, #4]
 1864 0130 96E7     		b	.L133
 1865              	.L134:
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1866              		.loc 1 1533 7 is_stmt 1 view .LVU626
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1867              		.loc 1 1533 75 is_stmt 0 view .LVU627
 1868 0132 01F11B04 		add	r4, r1, #27
 1869 0136 05EB0415 		add	r5, r5, r4, lsl #4
 1870 013a 6C68     		ldr	r4, [r5, #4]
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1871              		.loc 1 1533 82 view .LVU628
 1872 013c 04F00F04 		and	r4, r4, #15
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1873              		.loc 1 1533 20 view .LVU629
 1874 0140 1461     		str	r4, [r2, #16]
 1875 0142 9DE7     		b	.L135
 1876              	.LVL132:
 1877              	.L136:
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1878              		.loc 1 1557 7 is_stmt 1 view .LVU630
 1879 0144 0268     		ldr	r2, [r0]
 1880 0146 1369     		ldr	r3, [r2, #16]
 1881              	.LVL133:
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1882              		.loc 1 1557 7 is_stmt 0 view .LVU631
 1883 0148 43F02003 		orr	r3, r3, #32
 1884 014c 1361     		str	r3, [r2, #16]
 1885 014e E6E7     		b	.L137
 1886              	.LVL134:
 1887              	.L128:
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
ARM GAS  /tmp/cc2z0qN7.s 			page 84


 1888              		.loc 1 1566 5 is_stmt 1 view .LVU632
 1889              		.loc 1 1566 21 is_stmt 0 view .LVU633
 1890 0150 436A     		ldr	r3, [r0, #36]
 1891              	.LVL135:
 1892              		.loc 1 1566 21 view .LVU634
 1893 0152 43F48023 		orr	r3, r3, #262144
 1894 0156 4362     		str	r3, [r0, #36]
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1895              		.loc 1 1568 5 is_stmt 1 view .LVU635
 1896              		.loc 1 1568 12 is_stmt 0 view .LVU636
 1897 0158 0120     		movs	r0, #1
 1898              	.LVL136:
 1899              	.L131:
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1900              		.loc 1 1570 1 view .LVU637
 1901 015a 70BC     		pop	{r4, r5, r6}
 1902              	.LCFI14:
 1903              		.cfi_restore 6
 1904              		.cfi_restore 5
 1905              		.cfi_restore 4
 1906              		.cfi_def_cfa_offset 0
 1907 015c 7047     		bx	lr
 1908              		.cfi_endproc
 1909              	.LFE80:
 1911              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1912              		.align	1
 1913              		.global	HAL_CAN_GetRxFifoFillLevel
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
 1917              		.fpu softvfp
 1919              	HAL_CAN_GetRxFifoFillLevel:
 1920              	.LVL137:
 1921              	.LFB81:
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1922              		.loc 1 1581 1 is_stmt 1 view -0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 0
 1925              		@ frame_needed = 0, uses_anonymous_args = 0
 1926              		@ link register save eliminated.
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filllevel = 0U;
 1927              		.loc 1 1582 3 view .LVU639
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1928              		.loc 1 1583 3 view .LVU640
 1929              		.loc 1 1583 24 is_stmt 0 view .LVU641
ARM GAS  /tmp/cc2z0qN7.s 			page 85


 1930 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1931              	.LVL138:
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
 1932              		.loc 1 1586 3 is_stmt 1 view .LVU642
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1933              		.loc 1 1588 3 view .LVU643
 1934              		.loc 1 1588 38 is_stmt 0 view .LVU644
 1935 0004 013B     		subs	r3, r3, #1
 1936              	.LVL139:
 1937              		.loc 1 1588 38 view .LVU645
 1938 0006 DBB2     		uxtb	r3, r3
 1939              		.loc 1 1588 6 view .LVU646
 1940 0008 012B     		cmp	r3, #1
 1941 000a 01D9     		bls	.L143
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1942              		.loc 1 1582 12 view .LVU647
 1943 000c 0020     		movs	r0, #0
 1944              	.LVL140:
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Rx FIFO fill level */
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return filllevel;
 1945              		.loc 1 1602 3 is_stmt 1 view .LVU648
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1946              		.loc 1 1603 1 is_stmt 0 view .LVU649
 1947 000e 7047     		bx	lr
 1948              	.LVL141:
 1949              	.L143:
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1950              		.loc 1 1591 5 is_stmt 1 view .LVU650
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1951              		.loc 1 1591 8 is_stmt 0 view .LVU651
 1952 0010 21B9     		cbnz	r1, .L141
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1953              		.loc 1 1593 7 is_stmt 1 view .LVU652
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1954              		.loc 1 1593 23 is_stmt 0 view .LVU653
 1955 0012 0368     		ldr	r3, [r0]
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1956              		.loc 1 1593 33 view .LVU654
 1957 0014 D868     		ldr	r0, [r3, #12]
 1958              	.LVL142:
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1959              		.loc 1 1593 17 view .LVU655
ARM GAS  /tmp/cc2z0qN7.s 			page 86


 1960 0016 00F00300 		and	r0, r0, #3
 1961              	.LVL143:
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1962              		.loc 1 1593 17 view .LVU656
 1963 001a 7047     		bx	lr
 1964              	.LVL144:
 1965              	.L141:
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1966              		.loc 1 1597 7 is_stmt 1 view .LVU657
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1967              		.loc 1 1597 23 is_stmt 0 view .LVU658
 1968 001c 0368     		ldr	r3, [r0]
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1969              		.loc 1 1597 33 view .LVU659
 1970 001e 1869     		ldr	r0, [r3, #16]
 1971              	.LVL145:
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1972              		.loc 1 1597 17 view .LVU660
 1973 0020 00F00300 		and	r0, r0, #3
 1974              	.LVL146:
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1975              		.loc 1 1597 17 view .LVU661
 1976 0024 7047     		bx	lr
 1977              		.cfi_endproc
 1978              	.LFE81:
 1980              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1981              		.align	1
 1982              		.global	HAL_CAN_ActivateNotification
 1983              		.syntax unified
 1984              		.thumb
 1985              		.thumb_func
 1986              		.fpu softvfp
 1988              	HAL_CAN_ActivateNotification:
 1989              	.LVL147:
 1990              	.LFB82:
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief    Interrupts management
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                        ##### Interrupts management #####
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
ARM GAS  /tmp/cc2z0qN7.s 			page 87


1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Enable interrupts.
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1991              		.loc 1 1634 1 is_stmt 1 view -0
 1992              		.cfi_startproc
 1993              		@ args = 0, pretend = 0, frame = 0
 1994              		@ frame_needed = 0, uses_anonymous_args = 0
 1995              		@ link register save eliminated.
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1996              		.loc 1 1635 3 view .LVU663
 1997              		.loc 1 1635 24 is_stmt 0 view .LVU664
 1998 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1999              	.LVL148:
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
 2000              		.loc 1 1638 3 is_stmt 1 view .LVU665
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2001              		.loc 1 1640 3 view .LVU666
 2002              		.loc 1 1640 38 is_stmt 0 view .LVU667
 2003 0004 013B     		subs	r3, r3, #1
 2004              	.LVL149:
 2005              		.loc 1 1640 38 view .LVU668
 2006 0006 DBB2     		uxtb	r3, r3
 2007              		.loc 1 1640 6 view .LVU669
 2008 0008 012B     		cmp	r3, #1
 2009 000a 05D9     		bls	.L147
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Enable the selected interrupts */
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2010              		.loc 1 1652 5 is_stmt 1 view .LVU670
 2011              		.loc 1 1652 21 is_stmt 0 view .LVU671
 2012 000c 436A     		ldr	r3, [r0, #36]
 2013 000e 43F48023 		orr	r3, r3, #262144
 2014 0012 4362     		str	r3, [r0, #36]
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 2015              		.loc 1 1654 5 is_stmt 1 view .LVU672
 2016              		.loc 1 1654 12 is_stmt 0 view .LVU673
 2017 0014 0120     		movs	r0, #1
 2018              	.LVL150:
ARM GAS  /tmp/cc2z0qN7.s 			page 88


1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2019              		.loc 1 1656 1 view .LVU674
 2020 0016 7047     		bx	lr
 2021              	.LVL151:
 2022              	.L147:
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2023              		.loc 1 1644 5 is_stmt 1 view .LVU675
 2024 0018 0268     		ldr	r2, [r0]
 2025 001a 5369     		ldr	r3, [r2, #20]
 2026 001c 1943     		orrs	r1, r1, r3
 2027              	.LVL152:
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2028              		.loc 1 1644 5 is_stmt 0 view .LVU676
 2029 001e 5161     		str	r1, [r2, #20]
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2030              		.loc 1 1647 5 is_stmt 1 view .LVU677
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2031              		.loc 1 1647 12 is_stmt 0 view .LVU678
 2032 0020 0020     		movs	r0, #0
 2033              	.LVL153:
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2034              		.loc 1 1647 12 view .LVU679
 2035 0022 7047     		bx	lr
 2036              		.cfi_endproc
 2037              	.LFE82:
 2039              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 2040              		.align	1
 2041              		.global	HAL_CAN_DeactivateNotification
 2042              		.syntax unified
 2043              		.thumb
 2044              		.thumb_func
 2045              		.fpu softvfp
 2047              	HAL_CAN_DeactivateNotification:
 2048              	.LVL154:
 2049              	.LFB83:
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Disable interrupts.
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2050              		.loc 1 1667 1 is_stmt 1 view -0
 2051              		.cfi_startproc
 2052              		@ args = 0, pretend = 0, frame = 0
 2053              		@ frame_needed = 0, uses_anonymous_args = 0
 2054              		@ link register save eliminated.
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2055              		.loc 1 1668 3 view .LVU681
 2056              		.loc 1 1668 24 is_stmt 0 view .LVU682
 2057 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2058              	.LVL155:
ARM GAS  /tmp/cc2z0qN7.s 			page 89


1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
 2059              		.loc 1 1671 3 is_stmt 1 view .LVU683
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2060              		.loc 1 1673 3 view .LVU684
 2061              		.loc 1 1673 38 is_stmt 0 view .LVU685
 2062 0004 013B     		subs	r3, r3, #1
 2063              	.LVL156:
 2064              		.loc 1 1673 38 view .LVU686
 2065 0006 DBB2     		uxtb	r3, r3
 2066              		.loc 1 1673 6 view .LVU687
 2067 0008 012B     		cmp	r3, #1
 2068 000a 05D9     		bls	.L151
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Disable the selected interrupts */
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2069              		.loc 1 1685 5 is_stmt 1 view .LVU688
 2070              		.loc 1 1685 21 is_stmt 0 view .LVU689
 2071 000c 436A     		ldr	r3, [r0, #36]
 2072 000e 43F48023 		orr	r3, r3, #262144
 2073 0012 4362     		str	r3, [r0, #36]
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 2074              		.loc 1 1687 5 is_stmt 1 view .LVU690
 2075              		.loc 1 1687 12 is_stmt 0 view .LVU691
 2076 0014 0120     		movs	r0, #1
 2077              	.LVL157:
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2078              		.loc 1 1689 1 view .LVU692
 2079 0016 7047     		bx	lr
 2080              	.LVL158:
 2081              	.L151:
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2082              		.loc 1 1677 5 is_stmt 1 view .LVU693
 2083 0018 0268     		ldr	r2, [r0]
 2084 001a 5369     		ldr	r3, [r2, #20]
 2085 001c 23EA0101 		bic	r1, r3, r1
 2086              	.LVL159:
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2087              		.loc 1 1677 5 is_stmt 0 view .LVU694
 2088 0020 5161     		str	r1, [r2, #20]
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2089              		.loc 1 1680 5 is_stmt 1 view .LVU695
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2090              		.loc 1 1680 12 is_stmt 0 view .LVU696
ARM GAS  /tmp/cc2z0qN7.s 			page 90


 2091 0022 0020     		movs	r0, #0
 2092              	.LVL160:
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2093              		.loc 1 1680 12 view .LVU697
 2094 0024 7047     		bx	lr
 2095              		.cfi_endproc
 2096              	.LFE83:
 2098              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 2099              		.align	1
 2100              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 2101              		.syntax unified
 2102              		.thumb
 2103              		.thumb_func
 2104              		.fpu softvfp
 2106              	HAL_CAN_TxMailbox0CompleteCallback:
 2107              	.LVL161:
 2108              	.LFB85:
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback(hcan);
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
ARM GAS  /tmp/cc2z0qN7.s 			page 91


1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           hcan->TxMailbox0AbortCallback(hcan);
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback(hcan);
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
ARM GAS  /tmp/cc2z0qN7.s 			page 92


1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           hcan->TxMailbox1AbortCallback(hcan);
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call registered callback*/
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback(hcan);
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call registered callback*/
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           hcan->TxMailbox2AbortCallback(hcan);
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
ARM GAS  /tmp/cc2z0qN7.s 			page 93


1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo0FullCallback(hcan);
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 message pending Callback */
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo0MsgPendingCallback(hcan);
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
ARM GAS  /tmp/cc2z0qN7.s 			page 94


1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo1FullCallback(hcan);
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 message pending Callback */
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->RxFifo1MsgPendingCallback(hcan);
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep Callback */
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->SleepCallback(hcan);
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
ARM GAS  /tmp/cc2z0qN7.s 			page 95


1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear WakeUp Flag */
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* WakeUp Callback */
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call registered callback*/
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->WakeUpFromRxMsgCallback(hcan);
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Error interrupts management *********************************************/
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Warning Flag */
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Passive Flag */
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Bus-off Flag */
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Last Error Code Flag */
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
ARM GAS  /tmp/cc2z0qN7.s 			page 96


2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_0):
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Stuff error */
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Form error */
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to CRC error */
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           default:
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Clear Last error code Flag */
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Clear ERRI Flag */
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code in handle */
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call Error callback function */
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call registered callback*/
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCallback(hcan);
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call weak (surcharged) callback */
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
ARM GAS  /tmp/cc2z0qN7.s 			page 97


2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief   CAN Callback functions
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                           ##### Callback functions #####
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides the following callback functions:
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2109              		.loc 1 2109 1 is_stmt 1 view -0
 2110              		.cfi_startproc
 2111              		@ args = 0, pretend = 0, frame = 0
 2112              		@ frame_needed = 0, uses_anonymous_args = 0
 2113              		@ link register save eliminated.
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2114              		.loc 1 2111 3 view .LVU699
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2115              		.loc 1 2117 1 is_stmt 0 view .LVU700
 2116 0000 7047     		bx	lr
 2117              		.cfi_endproc
 2118              	.LFE85:
 2120              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
ARM GAS  /tmp/cc2z0qN7.s 			page 98


 2121              		.align	1
 2122              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 2123              		.syntax unified
 2124              		.thumb
 2125              		.thumb_func
 2126              		.fpu softvfp
 2128              	HAL_CAN_TxMailbox1CompleteCallback:
 2129              	.LVL162:
 2130              	.LFB86:
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2131              		.loc 1 2126 1 is_stmt 1 view -0
 2132              		.cfi_startproc
 2133              		@ args = 0, pretend = 0, frame = 0
 2134              		@ frame_needed = 0, uses_anonymous_args = 0
 2135              		@ link register save eliminated.
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2136              		.loc 1 2128 3 view .LVU702
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2137              		.loc 1 2134 1 is_stmt 0 view .LVU703
 2138 0000 7047     		bx	lr
 2139              		.cfi_endproc
 2140              	.LFE86:
 2142              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 2143              		.align	1
 2144              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 2145              		.syntax unified
 2146              		.thumb
 2147              		.thumb_func
 2148              		.fpu softvfp
 2150              	HAL_CAN_TxMailbox2CompleteCallback:
 2151              	.LVL163:
 2152              	.LFB87:
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2153              		.loc 1 2143 1 is_stmt 1 view -0
 2154              		.cfi_startproc
ARM GAS  /tmp/cc2z0qN7.s 			page 99


 2155              		@ args = 0, pretend = 0, frame = 0
 2156              		@ frame_needed = 0, uses_anonymous_args = 0
 2157              		@ link register save eliminated.
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2158              		.loc 1 2145 3 view .LVU705
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2159              		.loc 1 2151 1 is_stmt 0 view .LVU706
 2160 0000 7047     		bx	lr
 2161              		.cfi_endproc
 2162              	.LFE87:
 2164              		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 2165              		.align	1
 2166              		.weak	HAL_CAN_TxMailbox0AbortCallback
 2167              		.syntax unified
 2168              		.thumb
 2169              		.thumb_func
 2170              		.fpu softvfp
 2172              	HAL_CAN_TxMailbox0AbortCallback:
 2173              	.LVL164:
 2174              	.LFB88:
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2175              		.loc 1 2160 1 is_stmt 1 view -0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 0
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 2179              		@ link register save eliminated.
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2180              		.loc 1 2162 3 view .LVU708
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2181              		.loc 1 2168 1 is_stmt 0 view .LVU709
 2182 0000 7047     		bx	lr
 2183              		.cfi_endproc
 2184              	.LFE88:
 2186              		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 2187              		.align	1
 2188              		.weak	HAL_CAN_TxMailbox1AbortCallback
 2189              		.syntax unified
ARM GAS  /tmp/cc2z0qN7.s 			page 100


 2190              		.thumb
 2191              		.thumb_func
 2192              		.fpu softvfp
 2194              	HAL_CAN_TxMailbox1AbortCallback:
 2195              	.LVL165:
 2196              	.LFB89:
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2197              		.loc 1 2177 1 is_stmt 1 view -0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 0
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
 2201              		@ link register save eliminated.
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2202              		.loc 1 2179 3 view .LVU711
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2203              		.loc 1 2185 1 is_stmt 0 view .LVU712
 2204 0000 7047     		bx	lr
 2205              		.cfi_endproc
 2206              	.LFE89:
 2208              		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 2209              		.align	1
 2210              		.weak	HAL_CAN_TxMailbox2AbortCallback
 2211              		.syntax unified
 2212              		.thumb
 2213              		.thumb_func
 2214              		.fpu softvfp
 2216              	HAL_CAN_TxMailbox2AbortCallback:
 2217              	.LVL166:
 2218              	.LFB90:
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2219              		.loc 1 2194 1 is_stmt 1 view -0
 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 0
 2222              		@ frame_needed = 0, uses_anonymous_args = 0
 2223              		@ link register save eliminated.
ARM GAS  /tmp/cc2z0qN7.s 			page 101


2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2224              		.loc 1 2196 3 view .LVU714
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2225              		.loc 1 2202 1 is_stmt 0 view .LVU715
 2226 0000 7047     		bx	lr
 2227              		.cfi_endproc
 2228              	.LFE90:
 2230              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 2231              		.align	1
 2232              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 2233              		.syntax unified
 2234              		.thumb
 2235              		.thumb_func
 2236              		.fpu softvfp
 2238              	HAL_CAN_RxFifo0MsgPendingCallback:
 2239              	.LVL167:
 2240              	.LFB91:
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2241              		.loc 1 2211 1 is_stmt 1 view -0
 2242              		.cfi_startproc
 2243              		@ args = 0, pretend = 0, frame = 0
 2244              		@ frame_needed = 0, uses_anonymous_args = 0
 2245              		@ link register save eliminated.
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2246              		.loc 1 2213 3 view .LVU717
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2247              		.loc 1 2219 1 is_stmt 0 view .LVU718
 2248 0000 7047     		bx	lr
 2249              		.cfi_endproc
 2250              	.LFE91:
 2252              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 2253              		.align	1
 2254              		.weak	HAL_CAN_RxFifo0FullCallback
 2255              		.syntax unified
 2256              		.thumb
 2257              		.thumb_func
 2258              		.fpu softvfp
ARM GAS  /tmp/cc2z0qN7.s 			page 102


 2260              	HAL_CAN_RxFifo0FullCallback:
 2261              	.LVL168:
 2262              	.LFB92:
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2263              		.loc 1 2228 1 is_stmt 1 view -0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 0
 2266              		@ frame_needed = 0, uses_anonymous_args = 0
 2267              		@ link register save eliminated.
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2268              		.loc 1 2230 3 view .LVU720
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2269              		.loc 1 2236 1 is_stmt 0 view .LVU721
 2270 0000 7047     		bx	lr
 2271              		.cfi_endproc
 2272              	.LFE92:
 2274              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 2275              		.align	1
 2276              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 2277              		.syntax unified
 2278              		.thumb
 2279              		.thumb_func
 2280              		.fpu softvfp
 2282              	HAL_CAN_RxFifo1MsgPendingCallback:
 2283              	.LVL169:
 2284              	.LFB93:
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2285              		.loc 1 2245 1 is_stmt 1 view -0
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 0
 2288              		@ frame_needed = 0, uses_anonymous_args = 0
 2289              		@ link register save eliminated.
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2290              		.loc 1 2247 3 view .LVU723
ARM GAS  /tmp/cc2z0qN7.s 			page 103


2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2291              		.loc 1 2253 1 is_stmt 0 view .LVU724
 2292 0000 7047     		bx	lr
 2293              		.cfi_endproc
 2294              	.LFE93:
 2296              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 2297              		.align	1
 2298              		.weak	HAL_CAN_RxFifo1FullCallback
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2302              		.fpu softvfp
 2304              	HAL_CAN_RxFifo1FullCallback:
 2305              	.LVL170:
 2306              	.LFB94:
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2307              		.loc 1 2262 1 is_stmt 1 view -0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 0
 2310              		@ frame_needed = 0, uses_anonymous_args = 0
 2311              		@ link register save eliminated.
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2312              		.loc 1 2264 3 view .LVU726
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2313              		.loc 1 2270 1 is_stmt 0 view .LVU727
 2314 0000 7047     		bx	lr
 2315              		.cfi_endproc
 2316              	.LFE94:
 2318              		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 2319              		.align	1
 2320              		.weak	HAL_CAN_SleepCallback
 2321              		.syntax unified
 2322              		.thumb
 2323              		.thumb_func
 2324              		.fpu softvfp
 2326              	HAL_CAN_SleepCallback:
 2327              	.LVL171:
 2328              	.LFB95:
ARM GAS  /tmp/cc2z0qN7.s 			page 104


2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Sleep callback.
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2329              		.loc 1 2279 1 is_stmt 1 view -0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 0
 2332              		@ frame_needed = 0, uses_anonymous_args = 0
 2333              		@ link register save eliminated.
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2334              		.loc 1 2281 3 view .LVU729
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2335              		.loc 1 2286 1 is_stmt 0 view .LVU730
 2336 0000 7047     		bx	lr
 2337              		.cfi_endproc
 2338              	.LFE95:
 2340              		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 2341              		.align	1
 2342              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 2343              		.syntax unified
 2344              		.thumb
 2345              		.thumb_func
 2346              		.fpu softvfp
 2348              	HAL_CAN_WakeUpFromRxMsgCallback:
 2349              	.LVL172:
 2350              	.LFB96:
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2351              		.loc 1 2295 1 is_stmt 1 view -0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 0
 2354              		@ frame_needed = 0, uses_anonymous_args = 0
 2355              		@ link register save eliminated.
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2356              		.loc 1 2297 3 view .LVU732
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
ARM GAS  /tmp/cc2z0qN7.s 			page 105


2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2357              		.loc 1 2303 1 is_stmt 0 view .LVU733
 2358 0000 7047     		bx	lr
 2359              		.cfi_endproc
 2360              	.LFE96:
 2362              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 2363              		.align	1
 2364              		.weak	HAL_CAN_ErrorCallback
 2365              		.syntax unified
 2366              		.thumb
 2367              		.thumb_func
 2368              		.fpu softvfp
 2370              	HAL_CAN_ErrorCallback:
 2371              	.LVL173:
 2372              	.LFB97:
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Error CAN callback.
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2373              		.loc 1 2312 1 is_stmt 1 view -0
 2374              		.cfi_startproc
 2375              		@ args = 0, pretend = 0, frame = 0
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377              		@ link register save eliminated.
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 2378              		.loc 1 2314 3 view .LVU735
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2379              		.loc 1 2319 1 is_stmt 0 view .LVU736
 2380 0000 7047     		bx	lr
 2381              		.cfi_endproc
 2382              	.LFE97:
 2384              		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 2385              		.align	1
 2386              		.global	HAL_CAN_IRQHandler
 2387              		.syntax unified
 2388              		.thumb
 2389              		.thumb_func
 2390              		.fpu softvfp
 2392              	HAL_CAN_IRQHandler:
 2393              	.LVL174:
 2394              	.LFB84:
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2395              		.loc 1 1698 1 is_stmt 1 view -0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 0
 2398              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2z0qN7.s 			page 106


1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2399              		.loc 1 1698 1 is_stmt 0 view .LVU738
 2400 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2401              	.LCFI15:
 2402              		.cfi_def_cfa_offset 40
 2403              		.cfi_offset 3, -40
 2404              		.cfi_offset 4, -36
 2405              		.cfi_offset 5, -32
 2406              		.cfi_offset 6, -28
 2407              		.cfi_offset 7, -24
 2408              		.cfi_offset 8, -20
 2409              		.cfi_offset 9, -16
 2410              		.cfi_offset 10, -12
 2411              		.cfi_offset 11, -8
 2412              		.cfi_offset 14, -4
 2413 0004 0546     		mov	r5, r0
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2414              		.loc 1 1699 3 is_stmt 1 view .LVU739
 2415              	.LVL175:
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2416              		.loc 1 1700 3 view .LVU740
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2417              		.loc 1 1700 25 is_stmt 0 view .LVU741
 2418 0006 0368     		ldr	r3, [r0]
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2419              		.loc 1 1700 12 view .LVU742
 2420 0008 5C69     		ldr	r4, [r3, #20]
 2421              	.LVL176:
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2422              		.loc 1 1701 3 is_stmt 1 view .LVU743
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2423              		.loc 1 1701 12 is_stmt 0 view .LVU744
 2424 000a D3F80480 		ldr	r8, [r3, #4]
 2425              	.LVL177:
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2426              		.loc 1 1702 3 is_stmt 1 view .LVU745
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2427              		.loc 1 1702 12 is_stmt 0 view .LVU746
 2428 000e 9F68     		ldr	r7, [r3, #8]
 2429              	.LVL178:
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2430              		.loc 1 1703 3 is_stmt 1 view .LVU747
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2431              		.loc 1 1703 12 is_stmt 0 view .LVU748
 2432 0010 D3F80CB0 		ldr	fp, [r3, #12]
 2433              	.LVL179:
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2434              		.loc 1 1704 3 is_stmt 1 view .LVU749
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2435              		.loc 1 1704 12 is_stmt 0 view .LVU750
 2436 0014 D3F810A0 		ldr	r10, [r3, #16]
 2437              	.LVL180:
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2438              		.loc 1 1705 3 is_stmt 1 view .LVU751
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2439              		.loc 1 1705 12 is_stmt 0 view .LVU752
 2440 0018 D3F81890 		ldr	r9, [r3, #24]
ARM GAS  /tmp/cc2z0qN7.s 			page 107


 2441              	.LVL181:
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2442              		.loc 1 1708 3 is_stmt 1 view .LVU753
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2443              		.loc 1 1708 6 is_stmt 0 view .LVU754
 2444 001c 14F00106 		ands	r6, r4, #1
 2445 0020 3BD0     		beq	.L166
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2446              		.loc 1 1711 5 is_stmt 1 view .LVU755
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2447              		.loc 1 1711 8 is_stmt 0 view .LVU756
 2448 0022 17F00106 		ands	r6, r7, #1
 2449 0026 16D0     		beq	.L167
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2450              		.loc 1 1714 7 is_stmt 1 view .LVU757
 2451 0028 0122     		movs	r2, #1
 2452 002a 9A60     		str	r2, [r3, #8]
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2453              		.loc 1 1716 7 view .LVU758
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2454              		.loc 1 1716 10 is_stmt 0 view .LVU759
 2455 002c 17F0020F 		tst	r7, #2
 2456 0030 08D1     		bne	.L201
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2457              		.loc 1 1729 9 is_stmt 1 view .LVU760
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2458              		.loc 1 1729 12 is_stmt 0 view .LVU761
 2459 0032 17F0040F 		tst	r7, #4
 2460 0036 0CD1     		bne	.L198
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2461              		.loc 1 1734 14 is_stmt 1 view .LVU762
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2462              		.loc 1 1734 17 is_stmt 0 view .LVU763
 2463 0038 17F00806 		ands	r6, r7, #8
 2464 003c 06D0     		beq	.L202
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2465              		.loc 1 1737 21 view .LVU764
 2466 003e 4FF48056 		mov	r6, #4096
 2467 0042 08E0     		b	.L167
 2468              	.L201:
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2469              		.loc 1 1724 9 is_stmt 1 view .LVU765
 2470 0044 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2471              	.LVL182:
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2472              		.loc 1 1699 12 is_stmt 0 view .LVU766
 2473 0048 0026     		movs	r6, #0
 2474 004a 04E0     		b	.L167
 2475              	.LVL183:
 2476              	.L202:
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2477              		.loc 1 1747 11 is_stmt 1 view .LVU767
 2478 004c FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2479              	.LVL184:
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2480              		.loc 1 1747 11 is_stmt 0 view .LVU768
 2481 0050 01E0     		b	.L167
ARM GAS  /tmp/cc2z0qN7.s 			page 108


 2482              	.LVL185:
 2483              	.L198:
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2484              		.loc 1 1732 21 view .LVU769
 2485 0052 4FF40066 		mov	r6, #2048
 2486              	.LVL186:
 2487              	.L167:
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2488              		.loc 1 1754 5 is_stmt 1 view .LVU770
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2489              		.loc 1 1754 8 is_stmt 0 view .LVU771
 2490 0056 17F4807F 		tst	r7, #256
 2491 005a 0DD0     		beq	.L169
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2492              		.loc 1 1757 7 is_stmt 1 view .LVU772
 2493 005c 2B68     		ldr	r3, [r5]
 2494 005e 4FF48072 		mov	r2, #256
 2495 0062 9A60     		str	r2, [r3, #8]
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2496              		.loc 1 1759 7 view .LVU773
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2497              		.loc 1 1759 10 is_stmt 0 view .LVU774
 2498 0064 17F4007F 		tst	r7, #512
 2499 0068 40F08680 		bne	.L203
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2500              		.loc 1 1772 9 is_stmt 1 view .LVU775
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2501              		.loc 1 1772 12 is_stmt 0 view .LVU776
 2502 006c 17F4806F 		tst	r7, #1024
 2503 0070 00F08680 		beq	.L171
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2504              		.loc 1 1775 11 is_stmt 1 view .LVU777
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2505              		.loc 1 1775 21 is_stmt 0 view .LVU778
 2506 0074 46F40056 		orr	r6, r6, #8192
 2507              	.LVL187:
 2508              	.L169:
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2509              		.loc 1 1797 5 is_stmt 1 view .LVU779
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2510              		.loc 1 1797 8 is_stmt 0 view .LVU780
 2511 0078 17F4803F 		tst	r7, #65536
 2512 007c 0DD0     		beq	.L166
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2513              		.loc 1 1800 7 is_stmt 1 view .LVU781
 2514 007e 2B68     		ldr	r3, [r5]
 2515 0080 4FF48032 		mov	r2, #65536
 2516 0084 9A60     		str	r2, [r3, #8]
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2517              		.loc 1 1802 7 view .LVU782
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2518              		.loc 1 1802 10 is_stmt 0 view .LVU783
 2519 0086 17F4003F 		tst	r7, #131072
 2520 008a 40F08380 		bne	.L204
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2521              		.loc 1 1815 9 is_stmt 1 view .LVU784
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
ARM GAS  /tmp/cc2z0qN7.s 			page 109


 2522              		.loc 1 1815 12 is_stmt 0 view .LVU785
 2523 008e 17F4802F 		tst	r7, #262144
 2524 0092 00F08380 		beq	.L174
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2525              		.loc 1 1818 11 is_stmt 1 view .LVU786
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2526              		.loc 1 1818 21 is_stmt 0 view .LVU787
 2527 0096 46F40046 		orr	r6, r6, #32768
 2528              	.LVL188:
 2529              	.L166:
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2530              		.loc 1 1841 3 is_stmt 1 view .LVU788
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2531              		.loc 1 1841 6 is_stmt 0 view .LVU789
 2532 009a 14F0080F 		tst	r4, #8
 2533 009e 07D0     		beq	.L176
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2534              		.loc 1 1843 5 is_stmt 1 view .LVU790
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2535              		.loc 1 1843 8 is_stmt 0 view .LVU791
 2536 00a0 1BF0100F 		tst	fp, #16
 2537 00a4 04D0     		beq	.L176
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2538              		.loc 1 1846 7 is_stmt 1 view .LVU792
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2539              		.loc 1 1846 17 is_stmt 0 view .LVU793
 2540 00a6 46F40076 		orr	r6, r6, #512
 2541              	.LVL189:
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2542              		.loc 1 1849 7 is_stmt 1 view .LVU794
 2543 00aa 2B68     		ldr	r3, [r5]
 2544 00ac 1022     		movs	r2, #16
 2545 00ae DA60     		str	r2, [r3, #12]
 2546              	.L176:
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2547              		.loc 1 1854 3 view .LVU795
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2548              		.loc 1 1854 6 is_stmt 0 view .LVU796
 2549 00b0 14F0040F 		tst	r4, #4
 2550 00b4 02D0     		beq	.L177
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2551              		.loc 1 1856 5 is_stmt 1 view .LVU797
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2552              		.loc 1 1856 8 is_stmt 0 view .LVU798
 2553 00b6 1BF0080F 		tst	fp, #8
 2554 00ba 79D1     		bne	.L205
 2555              	.L177:
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2556              		.loc 1 1873 3 is_stmt 1 view .LVU799
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2557              		.loc 1 1873 6 is_stmt 0 view .LVU800
 2558 00bc 14F0020F 		tst	r4, #2
 2559 00c0 04D0     		beq	.L178
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2560              		.loc 1 1876 5 is_stmt 1 view .LVU801
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2561              		.loc 1 1876 14 is_stmt 0 view .LVU802
ARM GAS  /tmp/cc2z0qN7.s 			page 110


 2562 00c2 2B68     		ldr	r3, [r5]
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2563              		.loc 1 1876 24 view .LVU803
 2564 00c4 DB68     		ldr	r3, [r3, #12]
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2565              		.loc 1 1876 8 view .LVU804
 2566 00c6 13F0030F 		tst	r3, #3
 2567 00ca 78D1     		bne	.L206
 2568              	.L178:
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2569              		.loc 1 1890 3 is_stmt 1 view .LVU805
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2570              		.loc 1 1890 6 is_stmt 0 view .LVU806
 2571 00cc 14F0400F 		tst	r4, #64
 2572 00d0 07D0     		beq	.L179
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2573              		.loc 1 1892 5 is_stmt 1 view .LVU807
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2574              		.loc 1 1892 8 is_stmt 0 view .LVU808
 2575 00d2 1AF0100F 		tst	r10, #16
 2576 00d6 04D0     		beq	.L179
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2577              		.loc 1 1895 7 is_stmt 1 view .LVU809
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2578              		.loc 1 1895 17 is_stmt 0 view .LVU810
 2579 00d8 46F48066 		orr	r6, r6, #1024
 2580              	.LVL190:
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2581              		.loc 1 1898 7 is_stmt 1 view .LVU811
 2582 00dc 2B68     		ldr	r3, [r5]
 2583 00de 1022     		movs	r2, #16
 2584 00e0 1A61     		str	r2, [r3, #16]
 2585              	.L179:
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2586              		.loc 1 1903 3 view .LVU812
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2587              		.loc 1 1903 6 is_stmt 0 view .LVU813
 2588 00e2 14F0200F 		tst	r4, #32
 2589 00e6 02D0     		beq	.L180
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2590              		.loc 1 1905 5 is_stmt 1 view .LVU814
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2591              		.loc 1 1905 8 is_stmt 0 view .LVU815
 2592 00e8 1AF0080F 		tst	r10, #8
 2593 00ec 6BD1     		bne	.L207
 2594              	.L180:
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2595              		.loc 1 1922 3 is_stmt 1 view .LVU816
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2596              		.loc 1 1922 6 is_stmt 0 view .LVU817
 2597 00ee 14F0100F 		tst	r4, #16
 2598 00f2 04D0     		beq	.L181
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2599              		.loc 1 1925 5 is_stmt 1 view .LVU818
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2600              		.loc 1 1925 14 is_stmt 0 view .LVU819
 2601 00f4 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/cc2z0qN7.s 			page 111


1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2602              		.loc 1 1925 24 view .LVU820
 2603 00f6 1B69     		ldr	r3, [r3, #16]
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2604              		.loc 1 1925 8 view .LVU821
 2605 00f8 13F0030F 		tst	r3, #3
 2606 00fc 6AD1     		bne	.L208
 2607              	.L181:
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2608              		.loc 1 1939 3 is_stmt 1 view .LVU822
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2609              		.loc 1 1939 6 is_stmt 0 view .LVU823
 2610 00fe 14F4003F 		tst	r4, #131072
 2611 0102 02D0     		beq	.L182
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2612              		.loc 1 1941 5 is_stmt 1 view .LVU824
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2613              		.loc 1 1941 8 is_stmt 0 view .LVU825
 2614 0104 18F0100F 		tst	r8, #16
 2615 0108 68D1     		bne	.L209
 2616              	.L182:
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2617              		.loc 1 1958 3 is_stmt 1 view .LVU826
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2618              		.loc 1 1958 6 is_stmt 0 view .LVU827
 2619 010a 14F4803F 		tst	r4, #65536
 2620 010e 02D0     		beq	.L183
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2621              		.loc 1 1960 5 is_stmt 1 view .LVU828
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2622              		.loc 1 1960 8 is_stmt 0 view .LVU829
 2623 0110 18F0080F 		tst	r8, #8
 2624 0114 69D1     		bne	.L210
 2625              	.L183:
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2626              		.loc 1 1977 3 is_stmt 1 view .LVU830
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2627              		.loc 1 1977 6 is_stmt 0 view .LVU831
 2628 0116 14F4004F 		tst	r4, #32768
 2629 011a 7AD0     		beq	.L184
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2630              		.loc 1 1979 5 is_stmt 1 view .LVU832
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2631              		.loc 1 1979 8 is_stmt 0 view .LVU833
 2632 011c 18F0040F 		tst	r8, #4
 2633 0120 74D0     		beq	.L185
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2634              		.loc 1 1982 7 is_stmt 1 view .LVU834
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2635              		.loc 1 1982 10 is_stmt 0 view .LVU835
 2636 0122 14F4807F 		tst	r4, #256
 2637 0126 04D0     		beq	.L186
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2638              		.loc 1 1982 55 discriminator 1 view .LVU836
 2639 0128 19F0010F 		tst	r9, #1
 2640 012c 01D0     		beq	.L186
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  /tmp/cc2z0qN7.s 			page 112


 2641              		.loc 1 1986 9 is_stmt 1 view .LVU837
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2642              		.loc 1 1986 19 is_stmt 0 view .LVU838
 2643 012e 46F00106 		orr	r6, r6, #1
 2644              	.LVL191:
 2645              	.L186:
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2646              		.loc 1 1992 7 is_stmt 1 view .LVU839
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2647              		.loc 1 1992 10 is_stmt 0 view .LVU840
 2648 0132 14F4007F 		tst	r4, #512
 2649 0136 04D0     		beq	.L187
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2650              		.loc 1 1992 55 discriminator 1 view .LVU841
 2651 0138 19F0020F 		tst	r9, #2
 2652 013c 01D0     		beq	.L187
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2653              		.loc 1 1996 9 is_stmt 1 view .LVU842
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2654              		.loc 1 1996 19 is_stmt 0 view .LVU843
 2655 013e 46F00206 		orr	r6, r6, #2
 2656              	.LVL192:
 2657              	.L187:
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2658              		.loc 1 2002 7 is_stmt 1 view .LVU844
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2659              		.loc 1 2002 10 is_stmt 0 view .LVU845
 2660 0142 14F4806F 		tst	r4, #1024
 2661 0146 04D0     		beq	.L188
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2662              		.loc 1 2002 48 discriminator 1 view .LVU846
 2663 0148 19F0040F 		tst	r9, #4
 2664 014c 01D0     		beq	.L188
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2665              		.loc 1 2006 9 is_stmt 1 view .LVU847
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2666              		.loc 1 2006 19 is_stmt 0 view .LVU848
 2667 014e 46F00406 		orr	r6, r6, #4
 2668              	.LVL193:
 2669              	.L188:
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2670              		.loc 1 2012 7 is_stmt 1 view .LVU849
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2671              		.loc 1 2012 10 is_stmt 0 view .LVU850
 2672 0152 14F4006F 		tst	r4, #2048
 2673 0156 59D0     		beq	.L185
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2674              		.loc 1 2012 57 discriminator 1 view .LVU851
 2675 0158 19F07009 		ands	r9, r9, #112
 2676              	.LVL194:
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2677              		.loc 1 2012 57 discriminator 1 view .LVU852
 2678 015c 56D0     		beq	.L185
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2679              		.loc 1 2015 9 is_stmt 1 view .LVU853
 2680 015e B9F1400F 		cmp	r9, #64
 2681 0162 65D0     		beq	.L189
ARM GAS  /tmp/cc2z0qN7.s 			page 113


 2682 0164 58D8     		bhi	.L190
 2683 0166 B9F1200F 		cmp	r9, #32
 2684 016a 5ED0     		beq	.L191
 2685 016c B9F1300F 		cmp	r9, #48
 2686 0170 42D1     		bne	.L211
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2687              		.loc 1 2027 13 view .LVU854
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2688              		.loc 1 2027 23 is_stmt 0 view .LVU855
 2689 0172 46F02006 		orr	r6, r6, #32
 2690              	.LVL195:
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2691              		.loc 1 2028 13 is_stmt 1 view .LVU856
 2692 0176 44E0     		b	.L194
 2693              	.LVL196:
 2694              	.L203:
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2695              		.loc 1 1767 9 view .LVU857
 2696 0178 2846     		mov	r0, r5
 2697 017a FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2698              	.LVL197:
 2699 017e 7BE7     		b	.L169
 2700              	.L171:
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2701              		.loc 1 1777 14 view .LVU858
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2702              		.loc 1 1777 17 is_stmt 0 view .LVU859
 2703 0180 17F4006F 		tst	r7, #2048
 2704 0184 02D0     		beq	.L172
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2705              		.loc 1 1780 11 is_stmt 1 view .LVU860
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2706              		.loc 1 1780 21 is_stmt 0 view .LVU861
 2707 0186 46F48046 		orr	r6, r6, #16384
 2708              	.LVL198:
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2709              		.loc 1 1780 21 view .LVU862
 2710 018a 75E7     		b	.L169
 2711              	.L172:
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2712              		.loc 1 1790 11 is_stmt 1 view .LVU863
 2713 018c 2846     		mov	r0, r5
 2714 018e FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2715              	.LVL199:
 2716 0192 71E7     		b	.L169
 2717              	.L204:
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2718              		.loc 1 1810 9 view .LVU864
 2719 0194 2846     		mov	r0, r5
 2720 0196 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2721              	.LVL200:
 2722 019a 7EE7     		b	.L166
 2723              	.L174:
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2724              		.loc 1 1820 14 view .LVU865
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2725              		.loc 1 1820 17 is_stmt 0 view .LVU866
ARM GAS  /tmp/cc2z0qN7.s 			page 114


 2726 019c 17F4002F 		tst	r7, #524288
 2727 01a0 02D0     		beq	.L175
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2728              		.loc 1 1823 11 is_stmt 1 view .LVU867
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2729              		.loc 1 1823 21 is_stmt 0 view .LVU868
 2730 01a2 46F48036 		orr	r6, r6, #65536
 2731              	.LVL201:
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2732              		.loc 1 1823 21 view .LVU869
 2733 01a6 78E7     		b	.L166
 2734              	.L175:
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2735              		.loc 1 1833 11 is_stmt 1 view .LVU870
 2736 01a8 2846     		mov	r0, r5
 2737 01aa FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2738              	.LVL202:
 2739 01ae 74E7     		b	.L166
 2740              	.L205:
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2741              		.loc 1 1859 7 view .LVU871
 2742 01b0 2B68     		ldr	r3, [r5]
 2743 01b2 0822     		movs	r2, #8
 2744 01b4 DA60     		str	r2, [r3, #12]
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2745              		.loc 1 1867 7 view .LVU872
 2746 01b6 2846     		mov	r0, r5
 2747 01b8 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2748              	.LVL203:
 2749 01bc 7EE7     		b	.L177
 2750              	.L206:
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2751              		.loc 1 1884 7 view .LVU873
 2752 01be 2846     		mov	r0, r5
 2753 01c0 FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2754              	.LVL204:
 2755 01c4 82E7     		b	.L178
 2756              	.L207:
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2757              		.loc 1 1908 7 view .LVU874
 2758 01c6 2B68     		ldr	r3, [r5]
 2759 01c8 0822     		movs	r2, #8
 2760 01ca 1A61     		str	r2, [r3, #16]
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2761              		.loc 1 1916 7 view .LVU875
 2762 01cc 2846     		mov	r0, r5
 2763 01ce FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2764              	.LVL205:
 2765 01d2 8CE7     		b	.L180
 2766              	.L208:
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2767              		.loc 1 1933 7 view .LVU876
 2768 01d4 2846     		mov	r0, r5
 2769 01d6 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2770              	.LVL206:
 2771 01da 90E7     		b	.L181
 2772              	.L209:
ARM GAS  /tmp/cc2z0qN7.s 			page 115


1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2773              		.loc 1 1944 7 view .LVU877
 2774 01dc 2B68     		ldr	r3, [r5]
 2775 01de 1022     		movs	r2, #16
 2776 01e0 5A60     		str	r2, [r3, #4]
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2777              		.loc 1 1952 7 view .LVU878
 2778 01e2 2846     		mov	r0, r5
 2779 01e4 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2780              	.LVL207:
 2781 01e8 8FE7     		b	.L182
 2782              	.L210:
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2783              		.loc 1 1963 7 view .LVU879
 2784 01ea 2B68     		ldr	r3, [r5]
 2785 01ec 0822     		movs	r2, #8
 2786 01ee 5A60     		str	r2, [r3, #4]
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2787              		.loc 1 1971 7 view .LVU880
 2788 01f0 2846     		mov	r0, r5
 2789 01f2 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2790              	.LVL208:
 2791 01f6 8EE7     		b	.L183
 2792              	.LVL209:
 2793              	.L211:
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2794              		.loc 1 2015 9 is_stmt 0 view .LVU881
 2795 01f8 B9F1100F 		cmp	r9, #16
 2796 01fc 01D1     		bne	.L194
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2797              		.loc 1 2019 13 is_stmt 1 view .LVU882
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2798              		.loc 1 2019 23 is_stmt 0 view .LVU883
 2799 01fe 46F00806 		orr	r6, r6, #8
 2800              	.LVL210:
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2801              		.loc 1 2020 13 is_stmt 1 view .LVU884
 2802              	.L194:
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2803              		.loc 1 2046 9 view .LVU885
 2804 0202 2A68     		ldr	r2, [r5]
 2805 0204 9369     		ldr	r3, [r2, #24]
 2806 0206 23F07003 		bic	r3, r3, #112
 2807 020a 9361     		str	r3, [r2, #24]
 2808              	.L185:
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2809              		.loc 1 2051 5 view .LVU886
 2810 020c 2B68     		ldr	r3, [r5]
 2811 020e 0422     		movs	r2, #4
 2812 0210 5A60     		str	r2, [r3, #4]
 2813              	.L184:
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2814              		.loc 1 2055 3 view .LVU887
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2815              		.loc 1 2055 6 is_stmt 0 view .LVU888
 2816 0212 9EB9     		cbnz	r6, .L212
 2817              	.LVL211:
ARM GAS  /tmp/cc2z0qN7.s 			page 116


 2818              	.L165:
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2819              		.loc 1 2069 1 view .LVU889
 2820 0214 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2821              	.LVL212:
 2822              	.L190:
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2823              		.loc 1 2015 9 view .LVU890
 2824 0218 B9F1500F 		cmp	r9, #80
 2825 021c 0BD0     		beq	.L195
 2826 021e B9F1600F 		cmp	r9, #96
 2827 0222 EED1     		bne	.L194
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2828              		.loc 1 2039 13 is_stmt 1 view .LVU891
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2829              		.loc 1 2039 23 is_stmt 0 view .LVU892
 2830 0224 46F48076 		orr	r6, r6, #256
 2831              	.LVL213:
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           default:
 2832              		.loc 1 2040 13 is_stmt 1 view .LVU893
 2833 0228 EBE7     		b	.L194
 2834              	.L191:
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2835              		.loc 1 2023 13 view .LVU894
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2836              		.loc 1 2023 23 is_stmt 0 view .LVU895
 2837 022a 46F01006 		orr	r6, r6, #16
 2838              	.LVL214:
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2839              		.loc 1 2024 13 is_stmt 1 view .LVU896
 2840 022e E8E7     		b	.L194
 2841              	.L189:
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2842              		.loc 1 2031 13 view .LVU897
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2843              		.loc 1 2031 23 is_stmt 0 view .LVU898
 2844 0230 46F04006 		orr	r6, r6, #64
 2845              	.LVL215:
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2846              		.loc 1 2032 13 is_stmt 1 view .LVU899
 2847 0234 E5E7     		b	.L194
 2848              	.L195:
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2849              		.loc 1 2035 13 view .LVU900
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2850              		.loc 1 2035 23 is_stmt 0 view .LVU901
 2851 0236 46F08006 		orr	r6, r6, #128
 2852              	.LVL216:
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2853              		.loc 1 2036 13 is_stmt 1 view .LVU902
 2854 023a E2E7     		b	.L194
 2855              	.L212:
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2856              		.loc 1 2058 5 view .LVU903
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2857              		.loc 1 2058 21 is_stmt 0 view .LVU904
 2858 023c 6B6A     		ldr	r3, [r5, #36]
ARM GAS  /tmp/cc2z0qN7.s 			page 117


 2859 023e 1E43     		orrs	r6, r6, r3
 2860              	.LVL217:
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2861              		.loc 1 2058 21 view .LVU905
 2862 0240 6E62     		str	r6, [r5, #36]
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2863              		.loc 1 2066 5 is_stmt 1 view .LVU906
 2864 0242 2846     		mov	r0, r5
 2865 0244 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2866              	.LVL218:
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2867              		.loc 1 2069 1 is_stmt 0 view .LVU907
 2868 0248 E4E7     		b	.L165
 2869              		.cfi_endproc
 2870              	.LFE84:
 2872              		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2873              		.align	1
 2874              		.global	HAL_CAN_GetState
 2875              		.syntax unified
 2876              		.thumb
 2877              		.thumb_func
 2878              		.fpu softvfp
 2880              	HAL_CAN_GetState:
 2881              	.LVL219:
 2882              	.LFB98:
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief   CAN Peripheral State functions
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             ##### Peripheral State and Error functions #####
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides functions allowing to :
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN state.
2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL state
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2883              		.loc 1 2349 1 is_stmt 1 view -0
 2884              		.cfi_startproc
ARM GAS  /tmp/cc2z0qN7.s 			page 118


 2885              		@ args = 0, pretend = 0, frame = 0
 2886              		@ frame_needed = 0, uses_anonymous_args = 0
 2887              		@ link register save eliminated.
 2888              		.loc 1 2349 1 is_stmt 0 view .LVU909
 2889 0000 0246     		mov	r2, r0
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2890              		.loc 1 2350 3 is_stmt 1 view .LVU910
 2891              		.loc 1 2350 24 is_stmt 0 view .LVU911
 2892 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2893 0006 D8B2     		uxtb	r0, r3
 2894              	.LVL220:
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2895              		.loc 1 2352 3 is_stmt 1 view .LVU912
 2896              		.loc 1 2352 38 is_stmt 0 view .LVU913
 2897 0008 013B     		subs	r3, r3, #1
 2898 000a DBB2     		uxtb	r3, r3
 2899              		.loc 1 2352 6 view .LVU914
 2900 000c 012B     		cmp	r3, #1
 2901 000e 00D9     		bls	.L217
 2902              	.LVL221:
 2903              	.L214:
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode is active */
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode request flag */
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode request is pending */
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2904              		.loc 1 2370 5 is_stmt 1 view .LVU915
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN state */
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return state;
 2905              		.loc 1 2374 3 view .LVU916
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2906              		.loc 1 2375 1 is_stmt 0 view .LVU917
 2907 0010 7047     		bx	lr
 2908              	.LVL222:
 2909              	.L217:
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2910              		.loc 1 2356 5 is_stmt 1 view .LVU918
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2911              		.loc 1 2356 14 is_stmt 0 view .LVU919
 2912 0012 1368     		ldr	r3, [r2]
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  /tmp/cc2z0qN7.s 			page 119


 2913              		.loc 1 2356 24 view .LVU920
 2914 0014 5A68     		ldr	r2, [r3, #4]
 2915              	.LVL223:
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2916              		.loc 1 2356 8 view .LVU921
 2917 0016 12F0020F 		tst	r2, #2
 2918 001a 05D1     		bne	.L215
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2919              		.loc 1 2362 10 is_stmt 1 view .LVU922
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2920              		.loc 1 2362 29 is_stmt 0 view .LVU923
 2921 001c 1B68     		ldr	r3, [r3]
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2922              		.loc 1 2362 13 view .LVU924
 2923 001e 13F0020F 		tst	r3, #2
 2924 0022 F5D0     		beq	.L214
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2925              		.loc 1 2365 13 view .LVU925
 2926 0024 0320     		movs	r0, #3
 2927              	.LVL224:
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2928              		.loc 1 2365 13 view .LVU926
 2929 0026 F3E7     		b	.L214
 2930              	.LVL225:
 2931              	.L215:
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2932              		.loc 1 2359 13 view .LVU927
 2933 0028 0420     		movs	r0, #4
 2934              	.LVL226:
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2935              		.loc 1 2359 13 view .LVU928
 2936 002a 7047     		bx	lr
 2937              		.cfi_endproc
 2938              	.LFE98:
 2940              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2941              		.align	1
 2942              		.global	HAL_CAN_GetError
 2943              		.syntax unified
 2944              		.thumb
 2945              		.thumb_func
 2946              		.fpu softvfp
 2948              	HAL_CAN_GetError:
 2949              	.LVL227:
 2950              	.LFB99:
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN error code.
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval CAN Error Code
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2951              		.loc 1 2384 1 is_stmt 1 view -0
 2952              		.cfi_startproc
 2953              		@ args = 0, pretend = 0, frame = 0
 2954              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2z0qN7.s 			page 120


 2955              		@ link register save eliminated.
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN error code */
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return hcan->ErrorCode;
 2956              		.loc 1 2386 3 view .LVU930
 2957              		.loc 1 2386 14 is_stmt 0 view .LVU931
 2958 0000 406A     		ldr	r0, [r0, #36]
 2959              	.LVL228:
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2960              		.loc 1 2387 1 view .LVU932
 2961 0002 7047     		bx	lr
 2962              		.cfi_endproc
 2963              	.LFE99:
 2965              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2966              		.align	1
 2967              		.global	HAL_CAN_ResetError
 2968              		.syntax unified
 2969              		.thumb
 2970              		.thumb_func
 2971              		.fpu softvfp
 2973              	HAL_CAN_ResetError:
 2974              	.LVL229:
 2975              	.LFB100:
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Reset the CAN error code.
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2976              		.loc 1 2396 1 is_stmt 1 view -0
 2977              		.cfi_startproc
 2978              		@ args = 0, pretend = 0, frame = 0
 2979              		@ frame_needed = 0, uses_anonymous_args = 0
 2980              		@ link register save eliminated.
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 2981              		.loc 1 2397 3 view .LVU934
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2982              		.loc 1 2398 3 view .LVU935
 2983              		.loc 1 2398 24 is_stmt 0 view .LVU936
 2984 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2985              	.LVL230:
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2986              		.loc 1 2400 3 is_stmt 1 view .LVU937
 2987              		.loc 1 2400 38 is_stmt 0 view .LVU938
 2988 0004 013B     		subs	r3, r3, #1
 2989              	.LVL231:
 2990              		.loc 1 2400 38 view .LVU939
 2991 0006 DBB2     		uxtb	r3, r3
 2992              		.loc 1 2400 6 view .LVU940
 2993 0008 012B     		cmp	r3, #1
 2994 000a 05D9     		bls	.L222
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset CAN error code */
ARM GAS  /tmp/cc2z0qN7.s 			page 121


2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = 0U;
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2995              		.loc 1 2409 5 is_stmt 1 view .LVU941
 2996              		.loc 1 2409 21 is_stmt 0 view .LVU942
 2997 000c 436A     		ldr	r3, [r0, #36]
 2998 000e 43F48023 		orr	r3, r3, #262144
 2999 0012 4362     		str	r3, [r0, #36]
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status = HAL_ERROR;
 3000              		.loc 1 2411 5 is_stmt 1 view .LVU943
 3001              	.LVL232:
 3002              		.loc 1 2411 12 is_stmt 0 view .LVU944
 3003 0014 0120     		movs	r0, #1
 3004              	.LVL233:
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the status */
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 3005              		.loc 1 2415 3 is_stmt 1 view .LVU945
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 3006              		.loc 1 2416 1 is_stmt 0 view .LVU946
 3007 0016 7047     		bx	lr
 3008              	.LVL234:
 3009              	.L222:
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 3010              		.loc 1 2404 5 is_stmt 1 view .LVU947
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 3011              		.loc 1 2404 21 is_stmt 0 view .LVU948
 3012 0018 0023     		movs	r3, #0
 3013 001a 4362     		str	r3, [r0, #36]
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3014              		.loc 1 2397 21 view .LVU949
 3015 001c 1846     		mov	r0, r3
 3016              	.LVL235:
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3017              		.loc 1 2397 21 view .LVU950
 3018 001e 7047     		bx	lr
 3019              		.cfi_endproc
 3020              	.LFE100:
 3022              		.text
 3023              	.Letext0:
 3024              		.file 3 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h"
 3025              		.file 4 "/opt/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/_stdint.h"
 3026              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 3027              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 3028              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 3029              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 3030              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 3031              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 3032              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/cc2z0qN7.s 			page 122


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_can.c
     /tmp/cc2z0qN7.s:16     .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/cc2z0qN7.s:24     .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/cc2z0qN7.s:40     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/cc2z0qN7.s:47     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/cc2z0qN7.s:337    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/cc2z0qN7.s:344    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/cc2z0qN7.s:359    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/cc2z0qN7.s:366    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/cc2z0qN7.s:587    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/cc2z0qN7.s:594    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/cc2z0qN7.s:692    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/cc2z0qN7.s:699    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/cc2z0qN7.s:798    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/cc2z0qN7.s:805    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/cc2z0qN7.s:861    .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/cc2z0qN7.s:868    .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/cc2z0qN7.s:917    .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/cc2z0qN7.s:924    .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/cc2z0qN7.s:1019   .text.HAL_CAN_WakeUp:0000000000000054 $d
     /tmp/cc2z0qN7.s:1024   .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/cc2z0qN7.s:1031   .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/cc2z0qN7.s:1081   .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/cc2z0qN7.s:1088   .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/cc2z0qN7.s:1293   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/cc2z0qN7.s:1300   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/cc2z0qN7.s:1375   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/cc2z0qN7.s:1382   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/cc2z0qN7.s:1453   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/cc2z0qN7.s:1460   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/cc2z0qN7.s:1517   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/cc2z0qN7.s:1524   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/cc2z0qN7.s:1599   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/cc2z0qN7.s:1606   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/cc2z0qN7.s:1912   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/cc2z0qN7.s:1919   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/cc2z0qN7.s:1981   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/cc2z0qN7.s:1988   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/cc2z0qN7.s:2040   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/cc2z0qN7.s:2047   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/cc2z0qN7.s:2099   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2106   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/cc2z0qN7.s:2121   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2128   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/cc2z0qN7.s:2143   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2150   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/cc2z0qN7.s:2165   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2172   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/cc2z0qN7.s:2187   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2194   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/cc2z0qN7.s:2209   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2216   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/cc2z0qN7.s:2231   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2238   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cc2z0qN7.s:2253   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2260   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
ARM GAS  /tmp/cc2z0qN7.s 			page 123


     /tmp/cc2z0qN7.s:2275   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2282   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/cc2z0qN7.s:2297   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2304   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/cc2z0qN7.s:2319   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2326   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/cc2z0qN7.s:2341   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2348   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/cc2z0qN7.s:2363   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/cc2z0qN7.s:2370   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/cc2z0qN7.s:2385   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/cc2z0qN7.s:2392   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/cc2z0qN7.s:2873   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/cc2z0qN7.s:2880   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/cc2z0qN7.s:2941   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/cc2z0qN7.s:2948   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/cc2z0qN7.s:2966   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/cc2z0qN7.s:2973   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError

UNDEFINED SYMBOLS
HAL_GetTick
